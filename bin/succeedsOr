#!/bin/bash

printShortUsage()
{
    SOMETHING_USAGE='-c|--command "TEST-COMMANDLINE" [-c ...] [--command-name NAME] | [--] SIMPLE-TEST-COMMAND [...]'
    source somethingOr --usage "$1"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Checks whether the passed TEST-COMMAND succeeds with exit status 0 (any output
is discarded). If not, it asks the user whether to make it work. If confirmed,
this will execute the shell COMMANDS read from stdin.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --command|-c CMD	    The command line to be tested. When this is a simple
			    command, it can also be passed as such.
    --command-name|-n NAME  Optional human-readable characterization of COMMAND
			    that will be used for querying (and memoizing the
			    decision).
HELPTEXT
    SOMETHING_WHAT_SUBJECT='a failing TEST-COMMAND'
    SOMETHING_HELP_STATUS0='if TEST-COMMAND succeeds or the user made it work'
    source somethingOr --long-usage "$1"
}

isNeedEval=
commandName=
typeset -a commands=()
source somethingOr --init-parse "$@"
while [ ${#ARGS[@]} -ne 0 ]
do
    case "${ARGS[0]}" in
	--command-name|-n)	    shiftArg; commandName="${ARGS[0]}"; shiftArg;;
	--command|-c)		    shiftArg; commands+=(${commands:+;} "${ARGS[0]}"); isNeedEval=t; shiftArg;;
	*)			    somethingParse || break;;
    esac
done
somethingVerifyParse
set -- "${ARGS[@]}"
if [ $# -ne 0 ]; then
    if [ "$isNeedEval" ]; then
	# Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
	# undo the effects of eval.
	printf -v quotedSimpleCommand '%q ' "$@"
	commands+=(${commands:+;} "${quotedSimpleCommand% }")
    else
	commands=("$@")
    fi
fi
if [ ${#commands[@]} -eq 0 ]; then
    echo 'ERROR: No COMMAND(s) specified; need to pass -c|--command "COMMANDLINE", or SIMPLECOMMAND.'
    echo
    printUsage "$0"
    exit 2
fi >&2
if [ "$isRecheckAtCheckpoints" ]; then
    printf -v quotedTestCommandLine '%q ' "${commands[@]}"
    checkpointPrePipeline=(sed -e "1i\\checkpoint() { ${isNeedEval:+eval }${quotedTestCommandLine//\\/\\\\}>/dev/null 2>&1 && exit 0; }")
fi
[ "$commandName" ] || commandName="${commands[*]}"

check()
(
    if [ "$isNeedEval" ]; then
	eval "${commands[@]}"
    else
	"${commands[@]}"
    fi >/dev/null 2>&1
)
check; status=$?


SOMETHING_SUBJECT="$commandName"
SOMETHING_STATE='succeed'
SOMETHING_ACTION='make it work'
SOMETHING_ACTION_PAST='made to work'
source somethingOr
