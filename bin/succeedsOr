#!/bin/bash

printUsage()
{
    cat <<HELPTEXT
Tests whether the passed TEST-COMMANDLINE succeeds with exit status 0 (any
output is discarded). If not, it asks the user whether to make it work. If
confirmed, this will execute the shell COMMANDS read from stdin.
HELPTEXT
printf 'Usage: echo COMMANDS | %q %s\n' "$(basename "$1")" '[--bare] [--recheck-at-end] TEST-COMMANDLINE [...] [-?|-h|--help]'
printf 'Usage: %q %s <<EOF\n  COMMANDS\nEOF\n' "$(basename "$1")" '[...] TEST-COMMANDLINE [...]'
}
isBare=
isRecheckAtEnd=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--bare)		shift; isBare=t;;
	--recheck-at-end)   shift; isRecheckAtEnd=t;;
	*)		break;;
    esac
done
if [ $# -eq 0 ]; then
    printUsage "$0" >&2
    exit 2
fi

eval "$@" >/dev/null 2>&1 && exit 0

MARKER_FILESPEC="$(echo "${TEMP:-/tmp}/$(basename -- "$0").$PPID")"

if [ -e "$MARKER_FILESPEC" ] && [ "$(find "$MARKER_FILESPEC" -mmin -15)" ]; then
    printf '%s does not succeed. Making it work.\n' "$*"
    CHOICE=y
else
    < /dev/tty read -p "$* does not succeed. Make it work? (y/n/a) " CHOICE
fi
if [ "$CHOICE" = 'a' ]; then
    touch "$MARKER_FILESPEC"
    CHOICE=y
fi

[ "$CHOICE" = 'y' ] || exit 2

if [ "$isBare" ]; then
    cat | bash -
else
    runWithPrompt --no-trailing-prompt
fi
status=$?

if [ "$isRecheckAtEnd" ]; then
    if ! eval "$@" >/dev/null 2>&1; then
	printf 'ERROR: %s still does not succeed.\n' "$*"
	if [ $status -eq 0 ]; then
	    exit 1
	else
	    exit $status
	fi
    fi
fi

exit $status
