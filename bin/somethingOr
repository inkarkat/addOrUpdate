#!/bin/bash source-this-script

: ${MEMOIZEDECISION_NEGATIVE_PREFIX=[33m}
: ${MEMOIZEDECISION_NEGATIVE_SUFFIX=[0m}
: ${SOMETHINGOR_ERROR_PREFIX=[31m}
: ${SOMETHINGOR_ERROR_SUFFIX=[0m}

case "$1" in
    --usage)
	shift
	printf 'Usage: echo COMMANDLINES | %q %s\n' "$(basename "$1")" "[-g|--memoize-group GROUP] [--bare|[--trailing-prompt|--no-trailing-prompt] [--no-output-no-prompt] [--no-output-no-error] [--no-success-no-count|--no-count-on N] [--emulate-prompt] [--worst-status]] [--timespan TIMESPAN[SUFFIX]] [--timeout TIMEOUT[SUFFIX]] [-d|--default c|y|a|l|A|d|n|o|v|N] [--recheck-at-end] [--recheck-at-checkpoints] [--skip-after-num-subsequent-fails N] [--skip-after-num-total-fails N] [--skip-after-fail-for NUMBER[SUFFIX]]] ${SOMETHING_USAGE:?} [-?|-h|--help]"
	printf 'Usage: %q %s <<EOF\n  COMMANDS\nEOF\n' "$(basename "$1")" "[...] ${SOMETHING_USAGE:?}"
	return
	;;
    --long-usage)
	shift
	cat <<HELPTEXT
    --memoize-group|-g GROUP
			    Optional application / use case for this tool's use.
			    Determines the configuration directory.
    --bare		    Do not print a status line before and after
			    launching the COMMAND.
    --trailing-prompt	    Customizations of the prompt emulation around
    --no-trailing-prompt    COMMAND; cp. runWithPrompt
    --no-output-no-prompt
    --no-output-no-error
    --no-success-no-count
    --no-count-on N
    --emulate-prompt
    --worst-status
    --timespan TIMESPAN[SUFFIX]
			    Recall a previous answer if a previous invocation
			    (with an answer of yes/any/no/none) had happened
			    within TIMESPAN. SUFFIX may be 's' for seconds (the
			    default), 'm' for minutes, 'h' for hours or 'd' for
			    days.
    --timeout TIMEOUT[SUFFIX]
			    Do not wait indefinitely for the user's answer, but
			    abort / use the --default instead after TIMEOUT have
			    passed without an answer.
    --default|-d confirm-each|c|yes|y|any|a|always|l|any-always|A|decline-each|d|no|n|none|o|never|v|none-never|N
			    Use the provided answer if querying is not possible
			    (no terminal) or when the user fails to answer
			    within the provided --timeout.
    --recheck-at-end	    will perform a second check after all COMMANDS have
			    been read; if it fails, an error is printed and this
			    command will fail.
    --recheck-at-checkpoints
			    Defines a custom "checkpoint" command that can be
			    included anywhere in COMMANDS to do a check. A
			    successful check will abort additional COMMANDS.
    --skip-after-num-subsequent-fails N
			    If the (re)check fails N times in a row (i.e.
			    without a sucessful recheck in between), never ask
			    the user again, and simply ignore
			    ${SOMETHING_WHAT_SUBJECT:?} from that point.
    --skip-after-num-total-fails N
			    If the (re)check fails an overall N times (ignoring
			    sucessful rechecks in between), never ask the user
			    again, and simply ignore ${SOMETHING_WHAT_SUBJECT:?}
			    from that point.
    --skip-after-fail-for NUMBER[SUFFIX]
			    If the (re)check fails, do not ask the user again
			    within the next NUMBER[SUFFIX], and ignore
			    ${SOMETHING_WHAT_SUBJECT:?} within
			    that interval (also for the counting of fails by
			    --skip-after-num-subsequent-fails and
			    --skip-after-num-total-fails).
			    SUFFIX may be 's' for seconds (the default), 'm' for
			    minutes, 'h' for hours or 'd' for days.
EXIT STATUS:
    0 ${SOMETHING_HELP_STATUS0:?}
    1 if not, or if the check at the end fails
    2 on invocation error
    3 ${SOMETHING_HELP_STATUS3_ADDITION}${SOMETHING_HELP_STATUS3_ADDITION:+ or }if memoization fails or the query times out without a given --default
    * any exit status from COMMANDS
HELPTEXT
	return
	;;
    --init-parse)
	shift
	# #SOMETHING_ALLOW_ANY_OPTION=t
	# source somethingOr --init-parse "$@"
	# while [ ${#ARGS[@]} -ne 0 ]
	# do
	#     case "${ARGS[0]}" in
	#	    --foo)  shiftArg; foo="${ARGS[0]}"; shiftArg;;
	#	    *)	    somethingParse || break;;
	#     esac
	# done
	# somethingVerifyParse
	# set -- "${ARGS[@]}"
	typeset -a ARGS=("$@")
	isBare=
	typeset -a runWithPromptArgs=()
	typeset -a memoizeDecisionArgs=()
	group=
	typeset -a failMemoizeDecisionArgs=()
	failMemoizeDecisionTimestamp=
	numSubsequentFails=
	numTotalFails=
	isRecheckAtEnd=
	isRecheckAtCheckpoints=
	typeset -a checkpointPrePipeline=()

	shiftArg()
	{
	    ARGS=("${ARGS[@]:1}")
	}
	somethingParse()
	{
	    case "${ARGS[0]}" in
		--help|-h|-\?)		    shiftArg; printLongUsage "$0"; exit 0;;
		--bare)			    shiftArg; isBare=t;;
		--no-trailing-prompt|--trailing-prompt|--no-output-no-prompt|--no-output-no-error|--no-success-no-count|--emulate-prompt|--worst-status)
					    runWithPromptArgs+=("${ARGS[0]}"); shiftArg;;
		--no-count-on)		    runWithPromptArgs+=("${ARGS[0]}" "${ARGS[1]}"); shiftArg; shiftArg;;
		--timespan|--timeout|--default|-d)
					    memoizeDecisionArgs+=("${ARGS[0]}" "${ARGS[1]}"); shiftArg; shiftArg;;
		--memoize-group|-g)	    shiftArg; group="${ARGS[0]}"; shiftArg;;
		--recheck-at-end)	    shiftArg; isRecheckAtEnd=t;;
		--recheck-at-checkpoints)   shiftArg; isRecheckAtCheckpoints=t;;
		--skip-after-num-subsequent-fails)
					    shiftArg; numSubsequentFails="${ARGS[0]}"; shiftArg;;
		--skip-after-num-total-fails)
					    shiftArg; numTotalFails="${ARGS[0]}"; shiftArg;;
		--skip-after-fail-for)	    shiftArg; memoizeDecisionArgs+=(--timespan "${ARGS[0]}"); failMemoizeDecisionTimestamp="${ARGS[0]}"; failMemoizeDecisionArgs=(--set-decision no); shiftArg;;
		--)			    shiftArg; return 1;;
		-*)			    [ "$SOMETHING_ALLOW_ANY_OPTION" ] && return 1
					    { echo "ERROR: Unknown option \"${ARGS[0]}\"!"; echo; printShortUsage "$0"; } >&2; exit 2
					    ;;
		*)			    return 1;;
	    esac
	    return 0
	}
	somethingVerifyParse()
	{
	    if [ -n "$numSubsequentFails" -a -n "$numTotalFails" ] && [ $numSubsequentFails -gt $numTotalFails ]; then
		echo >&2 'Warning: Number of subsequent fails is larger than the number of total fails and will never be reached.'
	    fi
	    [ "$group" ] || group="$(basename -- "$0").$PPID"
	    [ ${#runWithPromptArgs[@]} -eq 0 ] && runWithPromptArgs=(--no-trailing-prompt)
	}
	return
	;;
esac

database()
{
    miniDB --schema 'SUBJECT SUBSEQUENT_FAILS TOTAL_FAILS' --namespace succeedsOr --table "$group" "$@"
}

isSkipAfterNum()
{
    [ -n "$numSubsequentFails" -o -n "$numTotalFails" ]
}
isSkipAfterFail()
{
    [ ${#failMemoizeDecisionArgs[@]} -gt 0 ]
}
handleSkipAfterNum()
{
    # Do this before handling numSubsequentFails and numTotalFails so that
    # --skip-after-fail-for takes precedence over
    # --skip-after-num-subsequent-fails and --skip-after-num-total-fails.
    if isSkipAfterNum; then
	SUBSEQUENT_FAILS=
	TOTAL_FAILS=
	if queryResult="$(database --query "${SOMETHING_SUBJECT:?}" --as-shell-variables)"; then
	    eval "$queryResult"
	    let SUBSEQUENT_FAILS+=1
	    let TOTAL_FAILS+=1
	elif [ $? -eq 1 -o $? -eq 4 ]; then
	    let SUBSEQUENT_FAILS=1
	    let TOTAL_FAILS=1
	fi
	if [ -n "$SUBSEQUENT_FAILS" -a -n "$TOTAL_FAILS" ]; then
	    database --update "${SOMETHING_SUBJECT:?}	$SUBSEQUENT_FAILS	$TOTAL_FAILS"

	    if [ -n "$numSubsequentFails" ] && [ ${SUBSEQUENT_FAILS:-0} -ge $numSubsequentFails ]; then
		printf >&2 '%s%s now could not be %s %d times in a row. I will not attempt to %s in the future any longer.%s\n' \
		    "$MEMOIZEDECISION_NEGATIVE_PREFIX" "${SOMETHING_SUBJECT:?}" "${SOMETHING_ACTION_PAST:?}" "$SUBSEQUENT_FAILS" "${SOMETHING_ACTION:?}" "$MEMOIZEDECISION_NEGATIVE_SUFFIX"
		failMemoizeDecisionArgs=()
		return 1
	    elif [ -n "$numTotalFails" ] && [ ${TOTAL_FAILS:-0} -ge $numTotalFails ]; then
		printf >&2 '%s%s now could not be %s a total of %d times. I will not attempt to %s in the future any longer.%s\n' \
		    "$MEMOIZEDECISION_NEGATIVE_PREFIX" "${SOMETHING_SUBJECT:?}" "${SOMETHING_ACTION_PAST:?}" "$TOTAL_FAILS" "${SOMETHING_ACTION:?}" "$MEMOIZEDECISION_NEGATIVE_SUFFIX"
		failMemoizeDecisionArgs=()
		return 1
	    fi
	fi
    fi
}
handleSkipAfterFail()
{
    if isSkipAfterFail; then
	memoizeDecision "${memoizeDecisionArgs[@]}" --memoize-group "$group" --subject "${SOMETHING_SUBJECT:?}" --action "${SOMETHING_ACTION:?}" "${failMemoizeDecisionArgs[@]}"
	return 1
    fi
}
resetSubsequentCounter()
{
    if [ "$numSubsequentFails" ]; then
	# Reset the counter for subsequent fails.
	database --update "${SOMETHING_SUBJECT:?}" --column SUBSEQUENT_FAILS=0
    fi
}

if [ $status -eq 0 ]; then
    resetSubsequentCounter
    exit 0
fi


if isSkipAfterNum; then
    SUBSEQUENT_FAILS=
    TOTAL_FAILS=
    if queryResult="$(database --query "${SOMETHING_SUBJECT:?}" --as-shell-variables)"; then
	eval "$queryResult"
	if [ -n "$numSubsequentFails" ] && [ ${SUBSEQUENT_FAILS:-0} -ge $numSubsequentFails ]; then
	    printf >&2 '%s%s does not %s, and could not be %s %d times in a row. I have given up to %s.%s\n' \
		"$MEMOIZEDECISION_NEGATIVE_PREFIX" "${SOMETHING_SUBJECT:?}" "${SOMETHING_STATE:?}" "${SOMETHING_ACTION_PAST:-${SOMETHING_ACTION:?}}" "$SUBSEQUENT_FAILS" "${SOMETHING_ACTION:?}" "$MEMOIZEDECISION_NEGATIVE_SUFFIX"
	    exit 1
	elif [ -n "$numTotalFails" ] && [ ${TOTAL_FAILS:-0} -ge $numTotalFails ]; then
	    printf >&2 '%s%s does not %s, and could not be %s a total of %d times. I have given up to %s.%s\n' \
		"$MEMOIZEDECISION_NEGATIVE_PREFIX" "${SOMETHING_SUBJECT:?}" "${SOMETHING_STATE:?}" "${SOMETHING_ACTION_PAST:-${SOMETHING_ACTION:?}}" "$TOTAL_FAILS" "${SOMETHING_ACTION:?}" "$MEMOIZEDECISION_NEGATIVE_SUFFIX"
	    exit 1
	fi
    fi
fi

if [ ! "$isRecheckAtEnd" ]; then
    # Need to handle skips before the memoizeDecision call that may abort the
    # execution of COMMANDS to avoid duplicate conflicting messages (first from
    # memoizeDecision that it may attempt to run something, then from the skip
    # handling that we've given up).
    # And for the skips, we first need to check for --skip-after-fail-for and
    # only then for --skip-after-num-*, so that the timeout takes precedence.
    # This is the other way around than with the recheck, where the timeout gets
    # set by the first call and then the second invocation first invokes
    # memoizeDecision, and that does the timeout handling, and then we check for
    # --skip-after-num-*. Here, we need to check for the timeout first, and do
    # this directly through executionMarker (duplicating the call from
    # memoizeDecision), because we don't want a positive message from
    # memoizeDecision, only the negative one. Then handle --skip-for-num-*, and
    # finally delegate to memoizeDecision.
    if isSkipAfterFail && \
	executionMarker --namespace memoizeDecision --group "$group" --fallback-subject '*' --query "${SOMETHING_SUBJECT:?}" --within "$failMemoizeDecisionTimestamp"; then
	printf >&2 '%s%s does not %s. Do not %s yet again.%s\n' "$MEMOIZEDECISION_NEGATIVE_PREFIX" "${SOMETHING_SUBJECT:?}" "${SOMETHING_STATE:?}" "${SOMETHING_ACTION:?}" "$MEMOIZEDECISION_NEGATIVE_SUFFIX"
	exit 1
    fi

    handleSkipAfterNum || exit 1
fi

memoizeDecision "${memoizeDecisionArgs[@]}" --memoize-group "$group" --subject "${SOMETHING_SUBJECT:?}" --state "${SOMETHING_STATE:?}" --action "${SOMETHING_ACTION:?}" || exit $?

runInput()
{
    if [ "$isBare" ]; then
	bash -
    else
	runWithPrompt "${runWithPromptArgs[@]}"
    fi
}
eval '"${checkpointPrePipeline[@]}"' "${checkpointPrePipeline:+|}" runInput
status=$?

if [ "$isRecheckAtEnd" ]; then
    if check; then
	resetSubsequentCounter
    else
	printf >&2 '%sERROR: %s still does not %s.%s\n' "$SOMETHINGOR_ERROR_PREFIX" "${SOMETHING_SUBJECT:?}" "${SOMETHING_STATE:?}" "$SOMETHINGOR_ERROR_SUFFIX"

	handleSkipAfterNum
	handleSkipAfterFail

	if [ $status -eq 0 ]; then
	    exit 1
	else
	    exit $status
	fi
    fi
fi

exit $status
