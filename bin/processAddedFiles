#!/bin/bash
set -o noglob -o pipefail

: ${PROCESSADDEDFILES_FILE_MARKER='{}'}
fileMarker="$PROCESSADDEDFILES_FILE_MARKER"; unset PROCESSADDEDFILES_FILE_MARKER

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '-i|--id ID [-d|--dir DIRSPEC [...]] -a|--after|-N|--newer [--initial-first|--initial-last I] [--max-first|--max-last M] [-s|--skip '\''GLOB'\'' [...]] -c|--command "COMMANDLINE" [-c ...] | [--] SIMPLECOMMAND [...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 'Try %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Any files that have been added / updated in DIRSPEC(s) between the previous run
and now are passed to COMMANDLINE. If that execution succeeds, the new baseline
is stored for the following run. This allows processing of any additions, even
when the invocation interval is irregular (e.g. triggered by anacron).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --id|-i ID		Identifier under which the state of the last processed
			file is stored.
    --dir|-d DIRSPEC	Observe DIRSPEC for added files.
    --after|-a		Added files are identified by alphabetically larger
			filenames; e.g. when the file name contains a timestamp
			in the form YYYY-MM-DD. The file modification dates are
			irrelevant.
    --newer|-N		Added files are identified by later file modification
			dates. The file names are irrelevant.
    --initial-first I	On the very first run (with that ID), only process up to
			I files, starting from the first. If more are available,
			these will be picked up by a subsequent run.
    --initial-last I	On the very first run (with that ID), only process the
			last I files. If more are available, these will be
			skipped over, also by subsequent runs.
    --max-first M	Only process up to M files, starting from the first
			added since the last run. If more are available, these
			will be picked up by a subsequent run.
    --max-last M	Only process the last M files that were added since the
			last run. If more are available, these will be skipped
			over, also by subsequent runs.
    --skip|-s 'GLOB'	Ignore added files that match GLOB (either the full
			path, or just the filename).
    --command|-c CMD	Execute CMD as a command-line. The file names that have
			been added will ${fileMarker:+either }be appended${fileMarker:+ or replace any $fileMarker
			marker inside CMD}.
EXIT STATUS:
    0	Complete success.
    2	Bad invocation, wrong or missing command-line arguments.
    3	Internal error or failed assertion.
    4	No added files have been found.
    *	any exit status from COMMANDS

Example:
HELPTEXT
    printf '%q %s\n' "$(basename "$1")" '--foo bar /tmp/foobar'
}

abortLastNewest()
{
    [ ${#addedFileCommand[@]} -eq 0 ] && return

    echo >&2 'ERROR: Only one of -a|--after or -N|--newer can be passed.'
    echo >&2
    printShortUsage "$1" >&2
    exit 2
}
abortFirstLastFilter()
{
    local what="${1:?}"; shift
    [ $# -eq 0 ] && return

    echo >&2 "ERROR: Only one of --${what}-first or --${what}-last can be passed."
    echo >&2
    printShortUsage "$1" >&2
    exit 2
}

id=
typeset -a dirspecs=()
typeset -a addedFileCommand=()
typeset -a allFileCommand=()
restartExitStatus=
typeset -a fileExtractor=()
typeset -a lastExtractor=()
typeset -a initialFilter=()
typeset -a maxFilter=()
typeset -a skipGlobs=()
isNeedEval=
typeset -a commands=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--id|-i)	shift; id="$1"; shift;;
	--dir|-d)	shift; dirspecs+=("$1"); shift;;
	--after|-a)	shift
			abortLastNewest "$0"
			addedFileCommand=(lastFiles --after)
			allFileCommand=(lastFiles --count 2147483647)
			restartExitStatus=4
			;;
	--newer|-N)	shift
			abortLastNewest "$0"
			addedFileCommand=(newerFiles --include-epoch --newer-than)
			allFileCommand=(newerFiles --include-epoch --newer-than 0)
			fileExtractor=(cut -f 2-)
			lastExtractor=(cut -f 1)
			;;
	--initial-first)
			shift; abortFirstLastFilter initial "${initialFilter[@]}"; initialFilter=(sed -ne "1,${1:?}p"); shift;;
	--initial-last)
			shift; abortFirstLastFilter initial "${initialFilter[@]}"; initialFilter=(tail -n "${1:?}"); shift;;
	--max-first)
			shift; abortFirstLastFilter max "${maxFilter[@]}"; maxFilter=(sed -ne "1,${1:?}p"); shift;;
	--max-last)
			shift; abortFirstLastFilter max "${maxFilter[@]}"; maxFilter=(tail -n "${1:?}"); shift;;
	--skip|-s)	shift; skipGlobs+=("$1"); shift;;
	--command|-c)	shift; commands+=(${commands:+;} "$1"); isNeedEval=t; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    if [ "$isNeedEval" ]; then
	# Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
	# undo the effects of eval.
	printf -v quotedSimpleCommand '%q ' "$@"
	printf -v escapedFileMarker %q "$fileMarker"
	commands+=(${commands:+;} "${quotedSimpleCommand//"$escapedFileMarker"/$fileMarker}")	# %q escapes {}, we don't want that to have it interpolated later.
    else
	commands=("$@")
    fi
fi
if [ -z "$id" ]; then
    echo 'ERROR: No -i|--id ID passed.'
    echo
    printShortUsage "$0"
    exit 2
elif [ ${#commands[@]} -eq 0 ]; then
    echo 'ERROR: No COMMAND(s) specified; need to pass -c|--command "COMMANDLINE", or SIMPLECOMMAND.'
    echo
    printShortUsage "$0"
    exit 2
fi >&2


database()
{
    miniDB --table processAddedFiles --schema 'ID LAST' "$@"
}
updateDatabase()
{
    database --update "${id:?}	${1?}"
}
readDatabase()
{
    database --query "${id:?}" --columns LAST
    case $? in
	1)	updateDatabase '';;
	0|4)	return 0;;
	*)	return 3;;
    esac
}

IFS=$'\n'
last="$(readDatabase)" || exit 3
typeset -a addedFilespecs=()
addedFilespecs=($(
    if [ "$last" ]; then
	eval '"${addedFileCommand[@]}" "$last" -- "${dirspecs[@]}"' "${maxFilter:+|}" '"${maxFilter[@]}"'
	typeset -a status=("${PIPESTATUS[@]}")
	if [ -n "$restartExitStatus" ] && [ ${status[0]} -eq $restartExitStatus ]; then
	    eval '"${allFileCommand[@]}" -- "${dirspecs[@]}"' "${initialFilter:+|}" '"${initialFilter[@]}"'
	else
	    exit ${status[-1]}
	fi
    else
	eval '"${allFileCommand[@]}" -- "${dirspecs[@]}"' "${initialFilter:+|}" '"${initialFilter[@]}"'
    fi
)) || exit 4
[ ${#addedFilespecs[@]} -eq 0 ] && exit 4

if [ ${#skipGlobs[@]} -gt 0 ]; then
    if [ ${#fileExtractor[@]} -gt 0 ]; then
	typeset -a acceptedFilespecs=()
	for filespec in "${addedFilespecs[@]}"
	do
	    extractedFilespec="$(printf '%s\n' "$filespec" | "${fileExtractor[@]}")"
	    globmatch "${skipGlobs[@]}" -- "$extractedFilespec" || acceptedFilespecs+=("$filespec")
	done
	addedFilespecs=("${acceptedFilespecs[@]}")
    else
	addedFilespecs=($(globmatch --files-not-matching "${skipGlobs[@]}" -- "${addedFilespecs[@]}"))
    fi
    [ ${#addedFilespecs[@]} -eq 0 ] && exit 4
fi

last="${addedFilespecs[-1]}"
if [ ${#fileExtractor[@]} -gt 0 ]; then
    addedFilespecs=($(printf '%s\n' "${addedFilespecs[@]}" | "${fileExtractor[@]}")) || exit 3
fi

if [ "$isNeedEval" ]; then
    printf -v quotedAddedFilespecs '%q ' "${addedFilespecs[@]}"; quotedAddedFilespecs="${quotedAddedFilespecs% }"
    typeset -a interpolatedCommands=("${commands[@]//"$fileMarker"/$quotedAddedFilespecs}")
    [ "${interpolatedCommands[*]}" = "${commands[*]}" ] && interpolatedCommands+=("$quotedAddedFilespecs")

    eval "${interpolatedCommands[@]}"
else
    didInterpolate=
    typeset -a interpolatedCommands=()
    for c in "${commands[@]}"
    do
	if [ "$c" = "$fileMarker" ]; then
	    interpolatedCommands+=("${addedFilespecs[@]}")
	    didInterpolate=t
	else
	    interpolatedCommands+=("$c")
	fi
    done
    [ "$didInterpolate" ] || interpolatedCommands+=("${addedFilespecs[@]}")

    "${interpolatedCommands[@]}"
fi
status=$?; [ $status -eq 0 ] || exit $status

if [ ${#lastExtractor[@]} -gt 0 ]; then
    last="$(printf '%s\n' "$last" | "${lastExtractor[@]}")" || exit 3
fi

updateDatabase "$last" || exit 3
