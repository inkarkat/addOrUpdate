#!/bin/bash

literalPattern()
{
    sed -e ':loop' \
	-e '$!{ N; b loop }' \
	-e 's/[][\$*.^]/\\&/g' \
	-e 's/\n/\\n/g'
}
literalReplacement()
{
    local literalReplacement="$1"
    literalReplacement="${literalReplacement//\\/\\\\}"
    literalReplacement="${literalReplacement//&/\\&}"
    literalReplacement="${literalReplacement//${NL}/\\n}"
    printf %s "$literalReplacement"
}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-i[SUFFIX]|--in-place[=SUFFIX]|-t|--test-only] [--all] [--ignore-nonexisting|--create-nonexisting] [--add-before|-add-after ADDRESS] -l|--line LINE [-a|--accept-match ACCEPT-PATTERN] [-u|--update-match PATTERN] [-r|--replacement REPLACEMENT] [--pre-line PRETEXT [--pre-line ...]] [--post-line POSTTEXT [--post-line ...]] [--pre-update PRETEXT [--pre-update ...]] [--post-update POSTTEXT [--post-update ...]] [FILE ...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Tries to locate passed LINE / PATTERN in at least one (all with --all) of the
passed FILE(s), updates with REPLACEMENT (in the first file to match, and only
the first such matching line there), or appends (at the end of the last FILE) if
it does not exist yet.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --in-place[=SUFFIX]|-i[SUFFIX]
			    Edit FILE(s) in place (makes backup if SUFFIX
			    supplied) instead of printing to standard output.
    --test-only|-t	    Just check whether an update would be made. Does not
			    modify or create non-existing FILE(s), or output the
			    result.
    --all		    Instead of just updating the first to match or
			    appending to the last FILE, make sure that each FILE
			    gets updated.
    --ignore-nonexisting    Succeed instead of complaining if (none of the)
			    FILE(s) does not exist yet.
    --create-nonexisting    Create the first (each with --all) passed FILE if it
			    does not exist yet, (and insert the LINE there).
    --add-before ADDRESS    Insert the update at ADDRESS instead of at the end
			    of the FILE. Any existing lines that follow that
			    line won't be considered!
    --add-after ADDRESS	    Do the update after ADDRESS instead of at the end of
			    the FILE. Any existing lines that follow that line
			    won't be considered!
    --line|-l LINE	    Search for (literal, full) LINE and add LINE if that
			    doesn't exist yet.
    --accept-match|-a ACCEPT-PATTERN
			    Don't update if ACCEPT-PATTERN already matches
			    somewhere (previously) in the FILE.
    --update-match|-u PATTERN
			    Instead of searching for the literal LINE, accept
			    the first line matching PATTERN (and replace it with
			    LINE).
    --replacement|-r REPLACEMENT
			    Replace with REPLACEMENT instead of the literal LINE
			    when a matching one has been found. This allows the
			    use of references like \1 and &. Literal backslashes
			    need to be doubled; literal & escaped.
    --pre-line PRETEXT	    When a fresh LINE is added, put PRETEXT before it.
			    This does not apply to the update of existing lines.
			    (This is assumed to be for comments or headers that
			    would already be there.)
    --post-line POSTTEXT    When a fresh LINE is added, put POSTTEXT after it.
    --pre-update PRETEXT    When an existing LINE is updated, put PRETEXT before
			    it.
    --post-update POSTTEXT  When an existing LINE is updated, put POSTTEXT after
			    it.

All PATTERNs are sed-style basic regular expressions; ADDRESS a sed address.

EXIT STATUS:
    0	An update has happened (with --all: in at least one FILE).
    1	The LINE already existed, no modifications were made.
    2	Bad invocation, wrong or missing command-line arguments.
    3	Internal error or failed assertion.
    4	None of the passed FILE(s) exist; no modifications could be made.
    5	A FILE could not be created / modified (due to problems with sed).

Example:
HELPTEXT
    printf '%q %s\n' "$(basename "$1")" '-i.bak --line "AcceptEnv FOO" /etc/ssh/sshd_config'
}

readonly NL=$'\n'
isTestOnly=
isAll=
isIgnoreNonexisting=
isCreateNonexisting=
typeset -a sedInplaceArgs=()
line=
acceptMatch=
updateMatch=
unset replacement
unset freshPreLines
unset freshPostLines
unset updatePreLines
unset updatePostLines
addBeforeAddress=
addAfterAddress=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	    shift; printLongUsage "$0"; exit 0;;
	--in-place|--in-place=*|-i*)
			    sedInplaceArgs+=("$1"); shift;;
	--test-only|-t)	    shift; isTestOnly=t;;
	--all)		    shift; isAll=t;;
	--ignore-nonexisting)
			    shift; isIgnoreNonexisting=t;;
	--create-nonexisting)
			    shift; isCreateNonexisting=t;;
	--line|-l)	    shift; line="$1"; shift;;
	--accept-match|-a)  shift; acceptMatch="$1"; shift;;
	--update-match|-u)  shift; updateMatch="$1"; shift;;
	--replacement|-r)   shift; replacement="${1//${NL}/\\n}"; shift;;
	--pre-line)	    shift; escapedLine="${1//\\/\\\\}"; freshPreLines="${freshPreLines}${freshPreLines:+\\$NL}${escapedLine//${NL}/\\$NL}"; shift;;
	--post-line)	    shift; escapedLine="${1//\\/\\\\}"; freshPostLines="${freshPostLines}${freshPostLines:+\\$NL}${escapedLine//${NL}/\\$NL}"; shift;;
	--pre-update)	    shift; updatePreLines="${updatePreLines}${updatePreLines:+\\n}$(literalReplacement "$1")"; shift;;
	--post-update)	    shift; updatePostLines="${updatePostLines}${updatePostLines:+\\n}$(literalReplacement "$1")"; shift;;
	--add-before)	    shift; addBeforeAddress="$1"; shift;;
	--add-after)	    shift; addAfterAddress="$1"; shift;;
	--)		    shift; break;;
	-)		    break;;
	-*)		    { echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		    break;;
    esac
done
if [ ! "$ADDORUPDATELINE_NO_APPEND" ] && [ -z "$line" ]; then
    echo 'ERROR: No LINE passed.'
    echo
    printUsage "$0"
    exit 2
elif [ "$ADDORUPDATELINE_NO_APPEND" ] && [ -z "$updateMatch" ]; then
    echo 'ERROR: No --update-match PATTERN passed.'
    echo
    printUsage "$0"
    exit 2
elif [ "$ADDORUPDATELINE_NO_APPEND" ] && [ -z "${replacement+t}" ]; then
    echo 'ERROR: No --replacement REPLACEMENT passed.'
    echo
    printUsage "$0"
    exit 2
elif [ ${#sedInplaceArgs[@]} -gt 0 -a -n "$isTestOnly" ]; then
    echo 'ERROR: Cannot combine --in-place and --test-only.'
    echo
    printUsage "$0"
    exit 2
elif [ "$isIgnoreNonexisting" ] && [ "$isCreateNonexisting" ]; then
    echo 'ERROR: Cannot combine --ignore-nonexisting and --create-nonexisting.'
    echo
    printUsage "$0"
    exit 2
elif [ -n "$addBeforeAddress" -a -n "$addAfterAddress" ]; then
    echo 'ERROR: Cannot combine --add-before and --add-after.'
    echo
    printUsage "$0"
    exit 2
elif [ "$ADDORUPDATELINE_NO_APPEND" ] && [ "$isCreateNonexisting" ]; then
    echo 'ERROR: Cannot use --create-nonexisting when appending is not allowed.'
    echo
    printUsage "$0"
    exit 2
fi >&2

insertableLine="${line//\\/\\\\}"
insertableLine="${insertableLine//${NL}/\\${NL}}"
if [ "$ADDORUPDATELINE_NO_APPEND" ]; then
    literalLinePattern='\n'  # Never matches in a line.
else
    literalLinePattern="^$(printf %s "$line" | literalPattern)\$"
fi
[ "$updateMatch" ] || updateMatch="$literalLinePattern"

[ $# -eq 0 ] && set -- -    # Read from stdin if no FILE is passed.
create()
{
    local filespec="$1"; shift
    # If the file is completely empty, sed treats this as zero lines, and no
    # address (not 1, not $) will match; the whole invocation would be a no-op.
    # Therefore, start with a single empty line, and change that one instead.
    echo > "$filespec" || return 1

    local content=
    [ -n "${freshPreLines+t}" ] && content="${content}${freshPreLines}\\${NL}"
    content="${content}${insertableLine}"
    [ -n "${freshPostLines+t}" ] && content="${content}\\${NL}${freshPostLines}"
    typeset -a sedProgram=(
	-e "\$c\\${NL}${content}"
    )

    sed "${sedInplaceArgs[@]}" \
	"${sedProgram[@]}" \
	-- "$filespec"
}
process()
{
    local isAppend="$1"; shift; [ "$ADDORUPDATELINE_NO_APPEND" ] && isAppend=
    local filespec="$1"; shift

    typeset -a sedProgram=()
    if [ "$acceptMatch" ]; then
	sedProgram+=(
	    # If ACCEPT-PATTERN matches, put a newline (as that can never be
	    # matched as PATTERN, and is easier to write than LINE) into the
	    # hold space to signal that there's already a match.
	    -e "/${acceptMatch//\//\\/}/{ x; s/.*/\\n/; x; b last; }"
	)
    fi

    sedProgram+=(
	# If there already has been a match (determined via the hold space, see
	# next), don't update following lines.
	-e "/${updateMatch//\//\\/}/{ x; /./{ x; b last; }; x; }"

	# If we find the pattern, duplicate its line into the hold space; this
	# serves as a marker that we have done an update and also that we don't
	# need to append the line at the end.
	-e "/${updateMatch//\//\\/}/h"
    )

    if [ -n "${replacement+t}" ]; then
	sedProgram+=(
	    # Do the update with REPLACEMENT.
	    -e "/${updateMatch//\//\\/}/{ /${literalLinePattern//\//\\/}/! {"
	    -e "s/${updateMatch//\//\\/}/${replacement//\//\\/}/"
	    # When the REPLACEMENT is identical to the original line, skip the
	    # pre-/post-line updates and indicate no change by putting a newline
	    # into the hold space, just like ACCEPT-PATTERN.
	    -e 'G; /^\(.*\)\n\1$/{ s/\n[^\n]*$//; x; s/.*/\n/; x; b last; }; s/\n[^\n]*$//;'
	)
	if [ -n "${updatePreLines+t}" ]; then
	    sedProgram+=(
		-e "s/^/${updatePreLines//\//\\/}\\n/"
	    )
	fi
	if [ -n "${updatePostLines+t}" ]; then
	    sedProgram+=(
		-e "s/\$/\\n${updatePostLines//\//\\/}/"
	    )
	fi
	sedProgram+=(
	    -e '} }'
	)
    else
	replaceableLine="$(literalReplacement "$line")"

	sedProgram+=(
	    # Do the update with LINE.
	    # As the "c" command starts a new cycle, but we still need to check
	    # the hold space, we use a substitution to update the line.
	    -e "/${updateMatch//\//\\/}/{ /${literalLinePattern//\//\\/}/!s/.*/${updatePreLines//\//\\/}${updatePreLines+\\n}${replaceableLine//\//\\/}${updatePostLines+\\n}${updatePostLines//\//\\/}/ }"
	)
    fi

    sedProgram+=(
	-e ':last'
	# On the last line, we check the hold space. If it's identical to the
	# changed line, no processing actually has happened, and we indicate an
	# error. If the hold space isn't empty, skip further processing (i.e.
	# appending), as we've already done the update.
	-e "${addBeforeAddress:-${addAfterAddress:-\$}}{ x; /^\\n\\n$/{ x; b slurpToEnd }; /^\\n\$\\|${literalLinePattern//\//\\/}/{ x; b slurpToEndAndQuit }; /./{ x; b; }; x; }"
    )

    if [ "$isAppend" ]; then
	# Else append LINE.
	sedProgram+=(
	    # $addBeforeAddress / $addAfterAddress may be a pattern that matches
	    # multiple times. To avoid duplicate appends, put two newlines (as
	    # these can never be matched as PATTERN) into the hold space to
	    # signal that there's already a match.
	    -e "${addBeforeAddress:-${addAfterAddress:-${addAfterAddress:-\$}}}{ x; s/.*/\\n\\n/; x; }"
	)

	if [ -n "${freshPreLines+t}" ]; then
	    sedProgram+=(
		-e "${addBeforeAddress:-${addAfterAddress:-\$}a}${addBeforeAddress:+i}\\${NL}${freshPreLines}"
	    )
	fi
	sedProgram+=(
	    -e "${addBeforeAddress:-${addAfterAddress:-\$}a}${addBeforeAddress:+i}\\${NL}${insertableLine}"
	)
	if [ -n "${freshPostLines+t}" ]; then
	    sedProgram+=(
		-e "${addBeforeAddress:-${addAfterAddress:-\$}a}${addBeforeAddress:+i}\\${NL}${freshPostLines}"
	    )
	fi
    else
	sedProgram+=(
	    # Indicate no update via special exit status.
	    -e "${addBeforeAddress:-${addAfterAddress:-\$}}b slurpToEndAndQuit"
	)
    fi

    sedProgram+=(
	-e 'b'

	-e ':slurpToEnd'
	-e '$!{ N; P; s/^[^\n]*\n//; b slurpToEnd }'
	-e 'b'

	-e ':slurpToEndAndQuit'
	-e '$!{ N; b slurpToEndAndQuit }'
	-e '$q 99'
    )
#dump-args -v 2>&3 "${sedProgram[@]}"
    sed "${sedInplaceArgs[@]}" \
	"${sedProgram[@]}" \
	-- "$filespec"
}

hadSuccess=
let existingCount=0
for ((i = 1; i <= $#; i++))
do
    filespec="${@:$i:1}"
    if [ "$filespec" = '-' -o -e "$filespec" ]; then
	let existingCount+=1
    elif [ "$isCreateNonexisting" ]; then
	if [ "$isTestOnly" ]; then
	    status=0
	else
	    create "$filespec"
	    status=$?
	fi
	case $status in
	    0)	[ "$isAll" ] || exit $status;;
	    *)	status=5;;
	esac
	let existingCount+=1
	continue
    else
	continue
    fi

    isAppend=; [ -n "$isAll" -o $i -eq $# ] && isAppend=t

    eval 'process "$isAppend" "$filespec"' "${isTestOnly:+>/dev/null}"
    status=$?
    case $status in
	0)	[ "$isAll" ] && hadSuccess=t || exit $status;;
	99)	status=1;;
	*)	status=5;;
    esac
done

if [ $existingCount -eq 0 ]; then
    if [ -n "$isIgnoreNonexisting" ]; then
	status=0
    else
	status=4
    fi
fi
[ "$hadSuccess" ] || exit $status
