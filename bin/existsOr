#!/bin/bash

printShortUsage()
{
    SOMETHING_USAGE='[--] EXECUTABLE'
    source somethingOr --usage "$1"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Checks whether the passed EXECUTABLE exists in PATH. If not, it asks the user
whether to define it. If confirmed, this will execute the shell COMMANDS read
from stdin.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    SOMETHING_WHAT_SUBJECT='a missing EXECUTABLE'
    SOMETHING_HELP_STATUS0='if EXECUTABLE exists or the user made it exist'
    source somethingOr --long-usage "$1"
}
source somethingOr --init-parse "$@"
while [ ${#ARGS[@]} -ne 0 ]
do
    somethingParse || break
done
somethingVerifyParse
set -- "${ARGS[@]}"
if [ $# -ne 1 -o -z "$1" ]; then
    printUsage "$0" >&2
    exit 2
fi
EXECUTABLE="$1"
if [ "$isRecheckAtCheckpoints" ]; then
    printf -v quotedExecutable '%q' "$EXECUTABLE"
    checkpointPrePipeline=(sed -e "1i\\checkpoint() { 'which' ${quotedExecutable//\\/\\\\} >/dev/null 2>&1 && exit 0; }")
fi

check()
{
    'which' "$EXECUTABLE" >/dev/null 2>&1
}
check; status=$?


SOMETHING_SUBJECT="$EXECUTABLE"
SOMETHING_STATE='exist'
SOMETHING_ACTION='define it'
SOMETHING_ACTION_PAST='defined'
source somethingOr
