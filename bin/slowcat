#!/bin/bash
set -o pipefail
shopt -qs extglob

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-i|--initial NUMBER[SUFFIX]] [-l|--line NUMBER[SUFFIX]|TIMESPAN[SUFFIX][ADJUSTMENT]] [-c|--char NUMBER[SUFFIX]|TIMESPAN[SUFFIX][ADJUSTMENT]] FILE [...] [-?|-h|--help]'
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-i|--initial NUMBER[SUFFIX]] [-L|--line-total|-C|--char-total TIMESPAN[SUFFIX]] FILE [...] [-?|-h|--help]'
    echo
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" '[...]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Print file contents on standard output with delay(s).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --initial|-i NUMBER[SUFFIX]	Delay before doing any output at all.
    --line|-l NUMBER[SUFFIX]|TIMESPAN[SUFFIX][ADJUSTMENT]
				Delay after each complete line (line); this also
				considers inner carriage returns.
    --char|-c NUMBER[SUFFIX]|TIMESPAN[SUFFIX][ADJUSTMENT]
				Delay after each individual character (char)
				other than newlines.
    --line-total|-L TIMESPAN[SUFFIX]
				Delay individual lines so that the total output
				time of all FILE(s) is about TIMESPAN.
    --char-total|-C TIMESPAN[SUFFIX]
				Delay individual characters so that the total
				output time of all FILE(s) is about TIMESPAN.
    NUMBER may be an arbitrary floating-point number, TIMESPAN must be an
    integer. SUFFIX may be 's' for seconds (the default), 'm' for minutes, 'h'
    for hours or 'd' for days.
    ADJUSTMENT can change the original value after every iteration. It starts
    with either + or -, followed by TIMESPAN, optionally followed by either
    SUFFIX or %. For example, 10m+30s starts with 10 minutes and then increases
    that by 30 seconds on every iteration. 10-5% starts with 10 seconds and then
    continually decreases that by 5 percent.
HELPTEXT
}

timeToSeconds()
{
    case "$1" in
	*([0-9]).+([0-9]))
			if [ -n "$adjustment" ]; then
			    echo >&2 "ERROR: Cannot combine floating point ${2:-timespan} with adjustment."
			    exit 2
			fi
			time="$1"
			;;
	+([0-9])?(s))   time="${1%s}";;
	+([0-9])m)	time=$((${1%m} * 60));;
	+([0-9])h)	time=$((${1%h} * 3600));;
	+([0-9])d)	time=$((${1%d} * 86400));;
	*)		printf >&2 "ERROR: Illegal ${2:-timespan}: %s\\n" "$1"; exit 2;;
    esac
    printf %s "$time"
}
timeWithAdjustmentToSeconds()
{
    local adjustment="${1##+([0-9.])?([smhd])}"
    local time="${1:0:$((${#1} - ${#adjustment}))}"
    if [ -z "$time" ]; then
	printf >&2 "ERROR: Empty ${2:-timespan}: %s\\n" "$time"; exit 2;
    fi
    case "$adjustment" in
	'')			;;
	[+-]+([0-9])?([smhd%]))	;;
	*)  printf >&2 'ERROR: Illegal adjustment: %s\n' "$adjustment"; exit 2;;
    esac
    time="$(timeToSeconds "$time" "$2")" || exit $?
    printf '%s\t%s\n' "$time" "$adjustment"
}
adjust()
{
    local var="${1?}"; shift
    local adjustment="$1"; shift
    eval "local value=\$$var"
    local newValue
    case "$adjustment" in
	'')	    return;;
	[+-]0?(%))  return;;
	++([0-9]))  newValue="$((value + ${adjustment#+}))";;
	-+([0-9]))  newValue="$((value - ${adjustment#-}))";;
	[+-]+([0-9])%)
		    # As Bash doesn't support floating point math yet, multiply
		    # with 100, add the percentage change, and divide back and
		    # round.
		    # To avoid that the rounding truncates small changes and
		    # therefore never lets the real value change, store the cent
		    # value in a global variable, and re-use that instead.
		    eval "local centValue=\$${var}CentValue"
		    [ "$centValue" ] || centValue=$((value * 100))

		    local change=$((${adjustment:1:-1} * value))
		    [ "${adjustment:0:1}" = '+' ] && let centValue+=$change || let centValue-=$change
		    newValue=$(((centValue + 50) / 100))

		    eval "${var}CentValue=\$centValue"
		    ;;
	*)	    printf >&2 'ASSERT: Invalid adjustment: %s\n' "$adjustment"; exit 3;;
    esac

    [ $newValue -lt 0 ] && newValue=0
    eval "$var=\$newValue"
}

initialDelay=
lineDelay=
charDelay=
lineDelayAdjustment=
charDelayAdjustment=
total=
totaller=
totalTargetDelay=
consumer=
linePrinter='printf %s'
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--initial|-i)	shift; initialDelay="$1"; shift;;
	--line|-l)	shift; < <(timeWithAdjustmentToSeconds "$1") IFS=$'\t' read -r lineDelay lineDelayAdjustment || exit 2; shift; consumer=lineDelay;;
	--char|-c)	shift; < <(timeWithAdjustmentToSeconds "$1") IFS=$'\t' read -r charDelay charDelayAdjustment || exit 2; shift; linePrinter=charDelay;;
	--line-total|-L)
			shift; total="$(timeToSeconds "$1")" || exit $?; shift; totaller=-l; totalTargetDelay=lineDelay; consumer=lineDelay;;
	--char-total|-C)
			shift; total="$(timeToSeconds "$1")" || exit $?; shift; totaller=-c; totalTargetDelay=charDelay; linePrinter=charDelay;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ -n "$total" ]; then
    if [ -n "$charDelay" -o -n "$lineDelay" ]; then
	echo 'ERROR: Cannot combine --line-total or --char-total with --line or --char.'
	echo
	printUsage "$0"
	exit 2
    elif [ $# -eq 0 ]; then
	echo 'ERROR: --line-total and --char-total need FILE(s) passed; cannot read from standard input.'
	echo
	printUsage "$0"
	exit 2
    fi >&2

    requiredSteps=$(cat -- "$@" | wc $totaller) || exit $?
    delay=$((total / requiredSteps))
    if [ $delay -eq 0 ]; then
	delay=000$((1000 * total / requiredSteps))
	delay=.${delay: -3}
    fi
    eval "$totalTargetDelay=$delay"
fi
[ -n "$charDelay" -a -z "$consumer" ] && consumer=lineReader



lineReader()
{
    isEOL=t
    while IFS=$'\n' read -r line || { isEOL=; [ -n "$line" ]; }
    do
	$linePrinter "$line"

	if [ "$isEOL" ]; then
	    printf '\n'
	fi
    done
}

lineDelay()
{
    isEOL=t
    while IFS=$'\r' read -ra lines || { isEOL=; [ ${#lines[@]} -gt 0 ]; }
    do
	let cnt=0
	for line in "${lines[@]}"
	do
	    let cnt+=1

	    # Return to the first column before printing a subsequent internal line
	    # fragment.
	    [ $cnt -gt 1 ] && printf '\r'

	    $linePrinter "$line"

	    # Conclude the last line fragment with a newline.
	    if [ $cnt -eq ${#lines[@]} ]; then
		if [ "$isEOL" ]; then
		    printf '\n'
		else
		    # Don't delay when there's no trailing newline.
		    continue
		fi
	    fi

	    sleep "$lineDelay"
	    adjust lineDelay "$lineDelayAdjustment"
	done
    done
}

charDelay()
{
    local line="$1"; shift
    local i
    for ((i = 0; i < ${#line}; i++))
    do
	printf %s "${line:i:1}"

	sleep "$charDelay"
	adjust charDelay "$charDelayAdjustment"
    done
}


[ "$initialDelay" ] && sleep "$initialDelay"
eval cat -- '"$@"' "${consumer:+|} $consumer"
