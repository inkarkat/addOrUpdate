#!/bin/bash

printShortUsage()
{
    SOMETHING_USAGE='[OPTIONS] [--] PATTERN'
    source somethingOr --usage "$1"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Checks whether the passed pgrep [OPTIONS] PATTERN is running as (at least one)
process. If not, it asks the user whether to start it. If confirmed, this will
execute the shell COMMANDS read from stdin.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    SOMETHING_WHAT_SUBJECT='a missing process'
    SOMETHING_HELP_STATUS0='if a PATTERN process is running or the user made it start'
    SOMETHING_HELP_STATUS3_ADDITION='pgrep'
    source somethingOr --long-usage "$1"
}
SOMETHING_ALLOW_ANY_OPTION=t
source somethingOr --init-parse "$@"
while [ ${#ARGS[@]} -ne 0 ]
do
    somethingParse || break
done
somethingVerifyParse
set -- "${ARGS[@]}"
if [ $# -eq 0 ]; then
    printUsage "$0" >&2
    exit 2
fi

typeset -a pgrepArgs=("$@")
readonly pattern=${!#}
if [ "$isRecheckAtCheckpoints" ]; then
    printf -v quotedPgrepArgs '%q ' "${pgrepArgs[@]}"
    checkpointPrePipeline=(sed -e "1i\\checkpoint() { pgrep --count ${quotedPgrepArgs//\\/\\\\} >/dev/null && exit 0; }")
fi

check()
{
    pgrep --count "${pgrepArgs[@]}" >/dev/null
}
check; status=$?
case $status in
    0)	;; # We have matches; let somethingOr deal with it.
    1)	;; # No processes matched, continue.
    2)	echo >&2 "ERROR: Invalid pgrep OPTIONS"; exit 2;;
    3)	echo >&2 "ERROR: Fatal pgrep error"; exit 3;;
    *)	echo >&2 "ERROR: Unknown pgrep error $status"; exit 3;;
esac


SOMETHING_SUBJECT="$pattern"
SOMETHING_STATE='run'
SOMETHING_ACTION='start it'
SOMETHING_ACTION_PAST='started'
source somethingOr
