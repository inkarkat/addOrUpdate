#!/bin/bash

: ${ADDORUPDATEBLOCK_COMMENT_PREFIX=# }

literalPattern()
{
    sed -e ':loop' \
	-e '$!{ N; b loop }' \
	-e 's/[][\$*.^]/\\&/g' \
	-e 's/\n/\\n/g'
}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-i[SUFFIX]|--in-place[=SUFFIX]|-t|--test-only] [--ignore-nonexisting|--create-nonexisting] [--add-before ADDRESS] -m|-marker WHAT|(--begin-marker BEGIN-LINE --end-marker END-LINE) -b|--block-text BLOCK-TEXT|-B|--block-file BLOCK-FILE [...] [-a|--accept-match ACCEPT-PATTERN] [--pre-line PRETEXT [--pre-line ...]|--post-line POSTTEXT [--post-line ...]]] [FILE ...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Tries to locate a sequence of lines that starts with BEGIN-LINE and ends with
END-LINE in at least one (all with --all) of the passed FILE(s), updates with
BLOCK contents (in the first file to match, and only the first such matching
block there), or appends (at the end of the last FILE, surrounded by BEGIN-LINE
and END-LINE) if it does not exist yet.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --in-place[=SUFFIX]|-i[SUFFIX]
			    Edit FILE(s) in place (makes backup if SUFFIX
			    supplied) instead of printing to standard output.
    --test-only|-t	    Just check whether an update would be made. Does not
			    modify the FILE(s) or output the result.
    --all|-a		    Instead of just updating the first to match or
			    appending to the last FILE, make sure that each FILE
			    gets updated.
    --ignore-nonexisting    Succeed instead of complaining if (none of the)
			    FILE(s) does not exist yet.
    --create-nonexisting    Create the first (each with --all) passed FILE if it
			    does not exist yet, (and insert the BLOCK there).
    --add-before ADDRESS    Insert the update at ADDRESS instead of at the end
			    of the FILE. Any existing blocks that follow that
			    line won't be considered!
    --marker|-m WHAT	    Synthesize BEGIN-LINE and END-LINE based on WHAT:
				${ADDORUPDATEBLOCK_COMMENT_PREFIX}BEGIN WHAT
				${ADDORUPDATEBLOCK_COMMENT_PREFIX}END WHAT
			    The comment prefix (${ADDORUPDATEBLOCK_COMMENT_PREFIX}) can be configured via
			    \$ADDORUPDATEBLOCK_COMMENT_PREFIX.
    --begin-marker BEGIN-LINE
			    The line that marks the beginning of the block.
    --end-marker END-LINE   The line that marks the end of the block.
    --block-text|-b BLOCK-TEXT
			    The block contents (one or multiple lines, excluding
			    the BEGIN-LINE and END-LINE markers).
    --block-file|-B BLOCK-FILE
			    The text file containing the block contents
			    (excluding the BEGIN-LINE and END-LINE markers).
    --accept-match|-a ACCEPT-PATTERN
			    Don't update if ACCEPT-PATTERN already matches
			    somewhere (previously) in the FILE.
    --pre-line PRETEXT	    When a fresh BLOCK is added, put PRETEXT before it.
			    This does not apply to the update of existing lines.
			    (This is assumed to be for comments or headers that
			    would already be there.)
    --post-line POSTTEXT    When a fresh BLOCK is added, put POSTTEXT after it.

EXIT STATUS:
    0	An update has happened (with --all: in at least one FILE).
    1	The BLOCK already existed, no modifications were made.
    2	Bad invocation, wrong or missing command-line arguments.
    3	Internal error or failed assertion.
    4	None of the passed FILE(s) exist; no modifications could be made.
    5	A FILE could not be created / modified (due to problems with sed).
    6	The BLOCK-FILE cannot be read.

Example:
HELPTEXT
    printf '%q %s\n' "$(basename "$1")" '-i.bak --marker "home network" --block-file path/to/myhosts.txt /etc/hosts'
}

readonly NL=$'\n'
isTestOnly=
isAll=
isIgnoreNonexisting=
isCreateNonexisting=
typeset -a sedInplaceArgs=()
beginMarker=
endMarker=
unset insertableBlockText
literalBlockTextPattern=
acceptMatch=
unset insertablePreLines
unset insertablePostLines
addBeforeAddress=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	    shift; printLongUsage "$0"; exit 0;;
	--in-place|--inplace=*|-i*)
			    sedInplaceArgs+=("$1"); shift;;
	--test-only|-t)	    shift; isTestOnly=t;;
	--all|-a)	    shift; isAll=t;;
	--ignore-nonexisting)
			    shift; isIgnoreNonexisting=t;;
	--create-nonexisting)
			    shift; isCreateNonexisting=t;;
	--marker|-m)	    shift; beginMarker="${ADDORUPDATEBLOCK_COMMENT_PREFIX}BEGIN${1:+ }${1//$'\n'/ }"; endMarker="${ADDORUPDATEBLOCK_COMMENT_PREFIX}END${1:+ }${1//$'\n'/ }"; shift;;
	--begin-marker)	    shift; beginMarker="${1//$'\n'/ }"; shift;;
	--end-marker)	    shift; endMarker="${1//$'\n'/ }"; shift;;
	--block-file|-B)    shift
			    text="$(<"$1")" || exit 6
			    shift
			    escapedText="${text//\\/\\\\}"; insertableBlockText="${insertableBlockText}${insertableBlockText:+\\$NL}${escapedText//${NL}/\\$NL}"
			    literalBlockTextPattern="${literalBlockTextPattern}${literalBlockTextPattern:+\\n}$(printf %s "$text" | literalPattern)"
			    ;;
	--block-text|-b)    shift
			    escapedText="${1//\\/\\\\}"; insertableBlockText="${insertableBlockText}${insertableBlockText:+\\$NL}${escapedText//${NL}/\\$NL}"
			    literalBlockTextPattern="${literalBlockTextPattern}${literalBlockTextPattern:+\\n}$(printf %s "$1" | literalPattern)"
			    shift
			    ;;
	--accept-match|-a)  shift; acceptMatch="$1"; shift;;
	--pre-line)	    shift; escapedLine="${1//\\/\\\\}"; insertablePreLines="${insertablePreLines}${insertablePreLines:+\\$NL}${escapedLine//${NL}/\\$NL}"; shift;;
	--post-line)	    shift; escapedLine="${1//\\/\\\\}"; insertablePostLines="${insertablePostLines}${insertablePostLines:+\\$NL}${escapedLine//${NL}/\\$NL}"; shift;;
	--add-before)	    shift; addBeforeAddress="$1"; shift;;
	--)		    shift; break;;
	-*)		    { echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		    break;;
    esac
done
if [ -z "${insertableBlockText+t}" ]; then
    echo 'ERROR: No BLOCK passed; use either -b|--block-text BLOCK-TEXT or -B|--block-file BLOCK-FILE.'
    echo
    printUsage "$0"
    exit 2
elif [ -z "$beginMarker" ]; then
    echo 'ERROR: No BEGIN-LINE; use either --begin-marker BEGIN-LINE or -m|--marker WHAT.'
    echo
    printUsage "$0"
    exit 2
elif [ -z "$endMarker" ]; then
    echo 'ERROR: No END-LINE; use --end-marker END-LINE.'
    echo
    printUsage "$0"
    exit 2
elif [ "$beginMarker" = "$endMarker" ]; then
    echo 'ERROR: BEGIN-LINE and END-LINE must be different.'
    echo
    printUsage "$0"
    exit 2
elif [ ${#sedInplaceArgs[@]} -gt 0 -a -n "$isTestOnly" ]; then
    echo 'ERROR: Cannot combine --in-place and --test-only.'
    echo
    printUsage "$0"
    exit 2
elif [ -n "$isIgnoreNonexisting" -a -n "$isCreateNonexisting" ]; then
    echo 'ERROR: Cannot combine --ignore-nonexisting and --create-nonexisting.'
    echo
    printUsage "$0"
    exit 2
fi >&2

literalBeginMarkerPattern="$(printf %s "$beginMarker" | literalPattern)"
literalEndMarkerPattern="$(printf %s "$endMarker" | literalPattern)"
insertableBeginMarker="${beginMarker//\\/\\\\}"
insertableEndMarker="${endMarker//\\/\\\\}"
[ $# -eq 0 ] && set -- -    # Read from stdin if no FILE is passed.

create()
{
    local filespec="$1"; shift
    # If the file is completely empty, sed treats this as zero lines, and no
    # address (not 1, not $) will match; the whole invocation would be a no-op.
    # Therefore, start with a single empty line, and change that one instead.
    echo > "$filespec" || return 1

    local insertableContent=
    [ -n "${insertablePreLines+t}" ] && insertableContent="${insertableContent}${insertablePreLines}\\${NL}"
    insertableContent="${insertableContent}${insertableBeginMarker}\\${NL}${insertableBlockText}\\${NL}${insertableEndMarker}"
    [ -n "${insertablePostLines+t}" ] && insertableContent="${insertableContent}\\${NL}${insertablePostLines}"
    typeset -a sedProgram=(
	-e "\$c\\${NL}${insertableContent}"
    )

    sed "${sedInplaceArgs[@]}" \
	"${sedProgram[@]}" \
	-- "$filespec"
}
process()
{
    local isAppend="$1"; shift
    local filespec="$1"; shift

    typeset -a sedProgram=()
    if [ "$acceptMatch" ]; then
	sedProgram+=(
	    # If ACCEPT-PATTERN matches, put a newline (as that can never be
	    # matched as a previous block) into the hold space (if the hold
	    # space is still empty; i.e. if no block has been updated yet)  to
	    # signal that there's already a match.
	    -e "/${acceptMatch//\//\\/}/{ x; s/^$/\\n/; x; b last; }"
	)
    fi

    sedProgram+=(
	# If there already has been a match (determined via the hold space, see
	# next), don't update following lines. Else, search for the end marker.
	-e "/^${literalBeginMarkerPattern//\//\\/}\$/{ x; /./{ x; b last; }; x; p; ${addBeforeAddress:-\$}{ s/.*//; b last }; s/.*//; N; s/^\\n//; b searchForEnd }"
	-e 'b last'

	-e ':slurpToEnd'
	-e '$!{ N; P; s/^[^\n]*\n//; b slurpToEnd }'
	-e 'b'

	-e ':slurpToEndAndQuit'
	-e '$!{ N; b slurpToEndAndQuit }'
	-e '$q 98'

	-e ':searchForEnd'
	# Another begin marker resets the search.
	-e "/\\(^\\|\\n\\)${literalBeginMarkerPattern//\//\\/}\$/{ p; ${addBeforeAddress:-\$}{ s/.*//; b last }; s/.*//; N; s/^\\n//; b searchForEnd }"
	# Keep reading until we find the end marker.
	-e "/\\(^\\|\\n\\)${literalEndMarkerPattern//\//\\/}\$/!{ ${addBeforeAddress:-\$}b last; N; b searchForEnd }"
	# If we find the end marker, duplicate the previous block into the hold
	# space; this serves as a marker that we have done an update and also
	# that we don't need to append the line at the end.
	# Then exchange the previous block with the new block and the end marker.
	# Unfortunately, the "c" command starts a new cycle, but we still need
	# to check the hold space. Therefore, use "i".
	-e "h; s/.*//; i\\${NL}${insertableBlockText}\\${NL}${endMarker//\\/\\\\}"
	# For lines other than the add-before address, we can simply "d" so that
	# "i" + "d" = "c".
	-e "${addBeforeAddress:-\$}!d"
	# At the add-before address and if we need to signal "no change", if this
	# is before the last line, join with the next line, remove the first
	# line (effectively emulating "d" but staying in the current cycle), and
	# then also jump to :slurpToEndAndQuit. On the last line, use the GNU
	# sed "Q" to quit with the special exit status while suppressing the
	# current line.
	# At the add-before address and if we don't need to signal "no change",
	# simply "d" now as well.
	-e "${addBeforeAddress:-\$}{ x; /^\\n\$\\|^${literalBlockTextPattern//\//\\/}\\n${literalEndMarkerPattern//\//\\/}\$/{ x; \$! { N; s/^[^\\n]*\\n//; b slurpToEndAndQuit }; Q 98 }; x; d; }"
    )

    sedProgram+=(
	-e ':last'
	# On the last line, we check the hold space. If it's identical to the
	# new block, no processing actually has happened, and we indicate an
	# error. If the hold space isn't empty, skip further processing (i.e.
	# appending), as we've already done the update.
	-e "${addBeforeAddress:-\$}{ x; /^\\n\$\\|^${literalBlockTextPattern//\//\\/}\\n${literalEndMarkerPattern//\//\\/}\$/{ x; b slurpToEndAndQuit }; /./{ x; b; }; x; }"
    )

    if [ "$isAppend" ]; then
	# Else append BLOCK.
	if [ -n "${insertablePreLines+t}" ]; then
	    sedProgram+=(
		-e "${addBeforeAddress:-\$a}${addBeforeAddress:+i}\\${NL}${insertablePreLines}"
	    )
	fi
	sedProgram+=(
	    -e "${addBeforeAddress:-\$a}${addBeforeAddress:+i}\\${NL}${insertableBeginMarker}\\${NL}${insertableBlockText}\\${NL}${insertableEndMarker}"
	)
	if [ -n "${insertablePostLines+t}" ]; then
	    sedProgram+=(
		-e "${addBeforeAddress:-\$a}${addBeforeAddress:+i}\\${NL}${insertablePostLines}"
	    )
	fi

	sedProgram+=(
	    # $addBeforeAddress may be a pattern that matches multiple times. To
	    # avoid duplicate appends, just slurp in the remainder without doing
	    # further matching of $addBeforeAddress.
	    -e "${addBeforeAddress:-\$}b slurpToEnd"
	)
    else
	sedProgram+=(
	    # Indicate no update via special exit status.
	    -e '$q 99'
	)
    fi
#dump-args -v 2>&3 "${sedProgram[@]}"
    sed "${sedInplaceArgs[@]}" \
	"${sedProgram[@]}" \
	-- "$filespec"
}

hadSuccess=
let existingCount=0
for ((i = 1; i <= $#; i++))
do
    filespec="${@:$i:1}"
    if [ "$filespec" = '-' -o -e "$filespec" ]; then
	let existingCount+=1
    elif [ "$isCreateNonexisting" ]; then
	create "$filespec"
	status=$?
	case $status in
	    0)	[ "$isAll" ] || exit $status;;
	    *)	status=5;;
	esac
	let existingCount+=1
	continue
    else
	continue
    fi

    isAppend=; [ -n "$isAll" -o $i -eq $# ] && isAppend=t

    eval 'process "$isAppend" "$filespec"' "${isTestOnly:+>/dev/null}"
    status=$?
    case $status in
	0)	[ "$isAll" ] && hadSuccess=t || exit $status;;
	98|99)	status=1;;
	*)	status=5;;
    esac
done

if [ $existingCount -eq 0 ]; then
    if [ -n "$isIgnoreNonexisting" ]; then
	status=0
    else
	status=4
    fi
fi
[ "$hadSuccess" ] || exit $status
