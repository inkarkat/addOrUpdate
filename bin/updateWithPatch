#!/bin/bash
set -o pipefail
shopt -qs extglob

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-i[SUFFIX]|--in-place[=SUFFIX]|-t|--test-only] [--first|--all] [PATCH-ARGS ...] [--] PATCH [...] [-?|-h|--help]'
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '--print-affected-files [--include-already-patched] [-i[SUFFIX]|--in-place[=SUFFIX]|-t|--test-only] [--first|--all] [PATCH-ARGS ...] [--] PATCH [...]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Updates file(s) through PATCH(es).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --in-place[=SUFFIX]|-i[SUFFIX]
			    Edit file(s) in place (makes backup if SUFFIX
			    supplied) instead of printing to standard output.
    --test-only|-t	    Just check whether an update would be made. Does not
			    modify or create non-existing file(s), or output the
			    result.
    --first		    Stop processing PATCH(es) after the first PATCH is
			    accepted.
    --all		    Ensure that each PATCH actually applies (or is has
			    already been applied), instead of tolerating
			    failures to apply PATCH(es) as long as at least one
			    applies.
    --print-affected-files  Just check for updates and only print the filespecs
			    that would be affected.
    --include-already-patched
			    Also print filespecs that have already been patched
			    and are up-to-date.
EXIT STATUS:
    0	An update has happened.
    1	The file(s) have already been patched, no modifications were made.
    2	Bad invocation, wrong or missing command-line arguments.
    3	Internal error or failed assertion.
    4	None of the passed PATCH(es) could be applied.
	With --all: At least one of the passed PATCH(es) could not be applied.
    5	A PATCH cannot be read.

Example:
HELPTEXT
    printf '%q %s\n' "$(basename "$1")" '-i.bak config.diff'
}

action=processPatches
isIncludeAlreadyPatched=
isTestOnly=
isFirst=
isAll=
isInplace=
typeset -a patchArgs=()
typeset -a patchInplaceArgs=(--output=-)
typeset -a patchDirectionArgs=(--forward)
typeset -a patchReverseDirectionArgs=(--reverse)
typeset -a patchReadOnlyArgs=(--read-only=fail)
typeset -a patchRejectFileArgs=(--reject-file=-)
patchBaseDirectory=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	    shift; printLongUsage "$0"; exit 0;;
	--print-affected-files)
			    shift
			    action=printAffectedFiles
			    isTestOnly=t; patchInplaceArgs=()
			    ;;
	--include-already-patched)
			    shift; isIncludeAlreadyPatched=t;;

	--in-place)	    shift; isInplace=t; patchInplaceArgs=();;
	--in-place=*)	    isInplace=t; patchInplaceArgs=(--backup --suffix="${1#--in-place=}"); shift;;
	-i*)		    isInplace=t; patchInplaceArgs=(--backup --suffix="${1#-i}"); shift;;
	--test-only|-t)	    shift; isTestOnly=t; patchInplaceArgs=();;
	--first)	    shift; isFirst=t;;
	--all)		    shift; isAll=t;;

	-+([ceElnTuZ]))	    patchArgs+=("$1"); shift;;
	-p*)		    patchArgs+=("$1"); shift;;
	--forward|-N)	    shift;; # This is our default; ignore.
	--reverse|-R)	    patchDirectionArgs=(--reverse)
			    patchReverseDirectionArgs=(--forward)
			    shift
			    ;;
	--@(backup-if-mismatch|no-backup-if-mismatch|binary|context|ed|remove-empty-files|ignore-whitespace|merge|normal|posix|follow-symlinks|set-time|unified|verbose|set-utc))
			    patchArgs+=("$1"); shift;;
	-[DFgprV])	    patchArgs+=("$1" "$2"); shift; shift;;
	--@(ifdef|fuzz|get|merge|strip|reject-format|version-control)=*)
			    patchArgs+=("$1"); shift;;
	--@(ifdef|fuzz|get|strip|reject-format|version-control))
			    patchArgs+=("$1" "$2"); shift; shift;;
	--directory|-d)	    patchArgs+=("$1" "$2"); patchBaseDirectory="$2"; shift; shift;;
	--directory=*)	    patchArgs+=("$1"); patchBaseDirectory="${1#--directory=}"; shift;;
	--read-only=*)	    patchReadOnlyArgs=("$1"); shift;;
	--read-only)	    patchReadOnlyArgs=("$1" "$2"); shift; shift;;
	--reject-file=*)    patchRejectFileArgs=("$1"); shift;;
	--reject-file)	    patchRejectFileArgs=("$1" "$2"); shift; shift;;

	--)		    shift; break;;
	-)		    break;;
	-*)		    { echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		    break;;
    esac
done

if [ $# -eq 0 ]; then
    echo 'ERROR: No PATCH passed.'
    echo
    printUsage "$0"
    exit 2
elif [ "$isInplace" ] && [ "$isTestOnly" ]; then
    echo 'ERROR: Cannot combine --in-place and --test-only.'
    echo
    printUsage "$0"
    exit 2
elif [ "$isFirst" ] && [ "$isAll" ]; then
    echo 'ERROR: Cannot combine --first and --all.'
    echo
    printUsage "$0"
    exit 2
fi >&2

doPatch()
{
    patch --batch ${isTestOnly:+--dry-run} "${patchArgs[@]}" "${patchInplaceArgs[@]}" "${patchReadOnlyArgs[@]}" "${patchRejectFileArgs[@]}" "$@"
}

processPatches()
{
    local forceStatus= status= patchFilespec
    for patchFilespec
    do
	doPatch --silent "${patchDirectionArgs[@]}" --input "$patchFilespec"
	case $? in
	    0)  if [ "$isAll" ]; then
		    [ ${status:-0} -le 1 ] && status=0
		else
		    status=0
		fi

		[ "$isFirst" ] && break
		;;
	    1)  if doPatch --silent "${patchReverseDirectionArgs[@]}" --dry-run --input "$patchFilespec" >/dev/null 2>&1; then
		    if [ "$isAll" ]; then
			: ${status:=1}
		    elif [ ${status:-4} -ge 1 ]; then
			status=1
		    fi
		elif [ "$isAll" ]; then
		    status=4
		fi
		;;
	    2)  forceStatus=5;;
	    *)  forceStatus=3;;
	esac
    done
    return ${forceStatus:-${status:-4}}
}

translatePatchBaseDirectory()
{
    [ -n "$patchBaseDirectory" ] || return 1
    cd "$patchBaseDirectory" || return 1

    filespecs=()
    local filespec; for filespec
    do
	filespecs+=("$(realpath --no-symlinks -- "$filespec")")
    done
}

printAffectedFiles()
{
    [ "$isIncludeAlreadyPatched" ] && patchDirectionArgs=() # To detect a reversed patch (i.e. an up-to-date file), we need to suppress any patch direction arguments.

    local overallStatus=1 patchFilespec
    typeset -a lines=() filespecs=()
    for patchFilespec
    do
	readarray -t lines < <(LC_ALL=C doPatch "${patchDirectionArgs[@]}" --input "$patchFilespec"; printf '\n%d\n' "$?")	# Exit status from the process substitution is lost; return the actual exit status via an appended additional line.
	local status=${lines[-1]}
	unset "lines[$((${#lines[@]}-1))]"
	[ -z "${lines[-1]}" ] && unset "lines[$((${#lines[@]}-1))]"

	if [ $status -eq 0 ]; then
	    local line; for line in "${lines[@]}"
	    do
		[[ "$line" =~ ^checking\ file\  ]] &&
		    filespecs+=("${line#checking file }")
	    done
	    overallStatus=0
	    [ "$isFirst" ] && break
	fi
    done

    [ ${#filespecs[@]} -eq 0 ] && return 1
    translatePatchBaseDirectory "${filespecs[@]}"

    printf '%s\n' "${filespecs[@]}" | sort --unique
    return $overallStatus
}

case ",${DEBUG:-}," in *,updateWithPatch,*) set -x;; esac
case ",${DEBUG:-}," in *,updateWithPatch\&[0-9],*) BASH_XTRACEFD="${DEBUG##updateWithPatch&}"; BASH_XTRACEFD="${BASH_XTRACEFD[0]}"; set -x;; esac
$action "$@"
