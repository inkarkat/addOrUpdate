#!/bin/bash
set -o pipefail
shopt -qs extglob nullglob

[ ${BASH_VERSINFO[0]} -ge 4 ] || { echo >&2 "ERROR: This script requires Bash 4.0 or higher!"; exit 2; }

if [ -z "$PGID" ]; then # No parent script has become the process group leader yet.
    pgid=$(($(ps -o pgid= -p "$$")))	# By defining this, we'll be killing subshell processes of this process group when we're done or interrupted. Any children with the same ambition will defer to us.
    if [ $$ -eq $pgid ]; then
	export PGID=$pgid   # We are (already / after setsid) in our own process group, announce our leadership to any children, so that they don't become leaders themselves and thereby decouple themselves from our lifetime control.
    else
	exec setsid --wait "${BASH_SOURCE[0]}" "$@" # Use setsid instead of set -m (...) to avoid having another subshell in between.
    fi
fi

: ${ONFILE_FILE_MARKER='{}'}
fileMarker="$ONFILE_FILE_MARKER"
STABILIZED_TIME=2147483647


printShortUsage()
{
    printf 'Usage: %q %s\n' "$(basename "$1")" "-d|--dir DIR|-g|--glob 'GLOB' [-d|--dir DIR]|--source-command SOURCE-COMMAND [-d|--dir DIR] [--accept-existing] [-n|--count N|-1] [--delay NUMBER[SUFFIX]] [--stabilization-time NUMBER[SUFFIX]] [-i|--interval NUMBER[SUFFIX] [-l|--max-files N] [-D|--stop-on-empty-dir] [-S|--stop-on-empty-file [--delete-empty-file]] [-s|--stop-on-filename PATTERN] [--print] [[--bare|--no-capture-output] [--prefix-command PC] [--prefix-command-command PCC] [--parallel [--rate-limit NUMBER[SUFFIX]]] [--exit-on-success|--exit-on-failure|--exit-on|-exit-unless NUM] [--delete-on-success|--delete-on-failure|--delete-on NUM|--delete-unless NUM] -c|--command \"COMMANDLINE\" | [--] SIMPLECOMMAND [...]] [-?|-h|--help]"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 'Try %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Observe DIR for added files and perform an action with them.
HELPDESCRIPTION
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --dir|-d DIR	The directory that is observed; subdirectories and
			hidden files are ignored.
    --glob|-g 'GLOB'	Only files matching GLOB are observed. Can be combined
			with --dir to go to DIR first.
    --source-command SOURCE-COMMAND
			SOURCE-COMMAND is invoked repeatedly and should return
			the observed files one per line. A non-successful exit
			status stops further observation. Can be combined with
			--dir to go to DIR first.
    --accept-existing	Treat files that exist when the command starts as
			added. Together with -1 this can be used to ensure that
			a file exists (and wait for it).
    --print		Print the added filespecs.
    --bare		Do not print a status line before and after launching
			the COMMAND.
    --no-capture-output	By default, no status line is printed if the COMMAND did
			not have any output, and failing parallel invocations
			without output are ignored altogether. This option turns
			this off and will print status lines (and consider
			parallel failures) even without output. Some
			(interactive) commands (like Vim) do not like having
			their output not connected to the terminal, and can be
			made to cooperate by passing this option.
    --command|-c CMD	Execute CMD as a command-line. The string $fileMarker is
			replaced by the added filespecs. Multiple files (via
			--max-files) are passed as individual arguments.
    --prefix-command PC	Put PC (directly) in front of the COMMAND(s) given by
			(subsequent, but not previous) --command or
			SIMPLECOMMAND. This can be used to inject a wrapper
			command.
    --prefix-command-command PCC
			Put PCC (directly) in front of the COMMAND(s) given by
			(subsequent, but not previous) --command, and pass
			COMMAND via --command COMMAND to PCC. This can be used
			to inject a wrapper command that itself takes a
			--command argument.
			This is different than --prefix-command when COMMAND
			itself is a pipeline; here, the entire pipeline will be
			passed to PCC; whereas PC would only cover the first
			command inside the pipeline.
    --delay NUMBER[SUFFIX]
			Sleep for NUMBER[SUFFIX]] before executing COMMAND (to
			allow the file to stabilize, for example).
    --stabilization-time NUMBER[SUFFIX]
			Wait until NUMBER[SUFFIX] has passed (with a granularity
			of INTERVAL) after the last modification of the file
			before recognizing the change.
    --interval|-i INTERVAL[SUFFIX]
			Wait for INTERVAL seconds between observations of DIR.
			By default, any change is observed almost immediately.
    --max-files|-l N	A maximum of N (default: 1) files are consumed and
			passed to COMMAND at once (if available). The entire set
			of files counts as one change (for --count).
    --stop-on-empty-dir|-D
			Stop once DIR becomes empty / is deleted.
    --stop-on-empty-file|-S
			Stop once an empty (after any stabilization time) file
			is added.
    --delete-empty-file	Remove the empty marker file when stopping.
    --stop-on-filename|-s PATTERN
			Stop observing if an added filename matches
			PATTERN. PATTERN is a Bash-style extended regular
			expression.
    --parallel		Instead of waiting for one COMMAND to finish before
			executing the next, run each one the moment the change
			is triggered. The default is sequential invocation.
    --rate-limit NUMBER[SUFFIX]]
			Sleep for NUMBER[SUFFIX]] before triggering the next
			parallel execution of COMMAND. This can avoid triggering
			too many simultaneous executions.
    --exit-on-success	Stop observing if COMMAND is successful.
    --exit-on-failure	Stop observing if COMMAND is unsuccessful.
    --exit-on NUM	Stop observing if COMMAND exits with NUM.
    --exit-unless NUM	Stop observing if COMMAND does not exit with NUM.
    --count|-n N	Stop observing after N additions.
    -1			Stop observing after the first added [set of] file(s).
    --delete-on-success	Delete the added file(s) if COMMAND is successful.
    --delete-on-failure	Delete the added file(s) if COMMAND is unsuccessful.
    --delete-on NUM	Delete the added file(s) if COMMAND exits with NUM.
    --delete-unless NUM	Delete the added file(s) if COMMAND does not exit with
			NUM.
Example:
HELPTEXT
    printf '%q %s\n' "$(basename "$1")" "--glob '*.url' -i 5 --accept-existing --delete-on-success --stop-on-empty-file --delete-empty-file -- wget --input-file $fileMarker"
}

dir=
glob=
sourceCommand=
isAcceptExisting=
isParallel=
count=
delay=
stabilizationTime=
interval=0.05
maxFiles=1
isStopOnEmptyDir=
isStopOnEmptyFile=
isDeleteEmptyFile=
stopFilenamePattern=
rateLimit=
exitOn=
exitComparison=-eq
deleteOn=
deleteComparison=-eq
typeset -a commands=()
prefixCommand=
prefixCommandCommand=
isPrint=
isBare=
isCaptureOutput=t
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--dir|-d)		shift; dir="$1"; shift;;
	--glob|-g)		shift; glob="$1"; shift;;
	--source-command)	shift; sourceCommand="$1"; shift;;
	--accept-existing)	shift; isAcceptExisting=t;;
	--count|-n)		shift; count="$1"; shift;;
	-1)			shift; count=1;;
	--exit-on-success)	shift; exitOn=0; exitComparison=-eq;;
	--exit-on-failure)	shift; exitOn=0; exitComparison=-ne;;
	--exit-on)		shift; exitOn="$1"; shift; exitComparison=-eq;;
	--exit-unless)		shift; exitOn="$1"; shift; exitComparison=-ne;;
	--delete-on-success)	shift; deleteOn=0; deleteComparison=-eq;;
	--delete-on-failure)	shift; deleteOn=0; deleteComparison=-ne;;
	--delete-on)		shift; deleteOn="$1"; shift; deleteComparison=-eq;;
	--delete-unless)	shift; deleteOn="$1"; shift; deleteComparison=-ne;;
	--parallel)		shift; isParallel=t;;
	--print)		shift; isPrint=t;;
	--bare)			shift; isBare=t;;
	--no-capture-output)	shift; isCaptureOutput=;;
	--command|-c)		shift
				if [ -n "$prefixCommandCommand" ]; then
				    printf -v quotedCommand %q "$1"
				    printf -v escapedFileMarker %q "$fileMarker" # %q escapes {}, we don't want that to have it interpolated later.
				    commands+=(${commands:+;} "${prefixCommandCommand} --command ${quotedCommand//"$escapedFileMarker"/$fileMarker}")
				else
				    commands+=(${commands:+;} "${prefixCommand}$1")
				fi
				shift
				;;
	--prefix-command)	shift; prefixCommand="$1"; shift;;
	--prefix-command-command)
				shift; prefixCommandCommand="$1"; shift;;
	--delay)		shift; delay="$1"; shift;;
	--stabilization-time)	shift
				case "$1" in
				    +([0-9])?(s))   stabilizationTime="${1%s}";;
				    +([0-9])m)	    stabilizationTime=$((${1%m} * 60));;
				    +([0-9])h)	    stabilizationTime=$((${1%h} * 3600));;
				    +([0-9])d)	    stabilizationTime=$((${1%d} * 86400));;
				    *)		    printf >&2 'ERROR: Illegal number: %s\n' "$1"; exit 2;;
				esac
				SECONDS=$(date +%s) # Need to sync up only once; Bash will keep the epoch updated from then on.
				shift
				;;
	--interval|-i)		shift; interval="$1"; shift;;
	--max-files|-l)		shift; maxFiles="$1"; shift;;
	--stop-on-empty-dir|-D)	shift; isStopOnEmptyDir=t;;
	--stop-on-empty-file|-S)
				shift; isStopOnEmptyFile=t;;
	--delete-empty-file)	shift; isDeleteEmptyFile=t;;
	--stop-on-filename|-s)	shift; stopFilenamePattern="$1"; shift;;
	--rate-limit)		shift; rateLimit="$1"; shift;;
	--)			shift; break;;
	-*)			{ echo "ERROR: Unknown option \"$1\"!"; echo; printShortUsage "$0"; } >&2; exit 2;;
	*)			break;;
    esac
done
if [ $# -ne 0 ]; then
    # Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
    # undo the effects of eval.
    printf -v quotedSimpleCommand '%q ' "$@"
    printf -v escapedFileMarker %q "$fileMarker"
    commands+=(${commands:+;} "${prefixCommand}${quotedSimpleCommand//"$escapedFileMarker"/$fileMarker}")	# %q escapes {}, we don't want that to have it interpolated later.
fi
if [ -z "${dir}${glob}${sourceCommand}" ]; then
    echo 'ERROR: No -d|--dir DIR|-g|--glob 'GLOB'|--source-command SOURCE-COMMAND passed.'
    echo
    printShortUsage "$0"
    exit 2
elif [ -n "$glob" -a -n "$sourceCommand" ]; then
    echo "ERROR: Can only pass either -g|--glob 'GLOB' or --source-command SOURCE-COMMAND."
    echo
    printShortUsage "$0"
    exit 2
elif [ -n "$dir" -a ! -d "$dir" ]; then
    printf 'ERROR: The directory %s does not exist.\n' "$dir"
    exit 2
elif [ -n "$dir" ] && ! cd "$dir"; then
    exit $?
elif [ "$isDeleteEmptyFile" ] && [ ! "$isStopOnEmptyFile" ]; then
    printShortUsage "$0"
    exit 2
elif [ ! "$isPrint" ] && [ ! "$count" ] && [ ${#commands[@]} -eq 0 ]; then
    echo 'ERROR: Need to pass either -1|-c|--count to count changes, --print to show updated files, or -c|--command to execute a command.'
    echo
    printShortUsage "$0"
    exit 2
fi >&2
if [ -n "$exitOn" -a -n "$isParallel" ]; then
    # Need a marker file to signal stopping; a variable won't do.
    keepRunningMarkerFile=$(mktemp --tmpdir "$(basename -- "$0")-XXXXXX" 2>/dev/null || echo "${TEMP:-/tmp}/$(basename -- "$0").$$$RANDOM")
    touch "$keepRunningMarkerFile"
fi

# Don't show a prompt if nothing was printed; this would just waste screen
# space. Parallel execution is supposedly mostly used to control resource usage
# (e.g. just one instance via singleton or not too frequent actions via
# oncePer). In that case, ignore failing invocations altogether.
typeset -a runWithPromptArgs=(); [ "$isCaptureOutput" ] && runWithPromptArgs+=(--no-output-no-prompt)
if [ "$isParallel" ]; then
    [ "$isCaptureOutput" ] && runWithPromptArgs+=(--no-output-no-error)
    runWithPromptArgs+=(--no-count-on 99)
fi



mtime()
{
    stat --format=%Y "$@" 2>/dev/null || echo '-1'
}

typeset -a existingFiles=()
getExistingFiles()
{
    if [ -n "$glob" ]; then
	existingFiles=($glob)
    elif [ -n "$sourceCommand" ]; then
	readarray -t existingFiles < <(eval "$sourceCommand"; printf '\n%d\n' "$?")
	[ ${existingFiles[-1]} -ne 0 ] && exit ${existingFiles[-1]}
	unset 'existingFiles[-1]'
	[ -z "${existingFiles[-1]}" ] && unset 'existingFiles[-1]'
    elif [ -n "$dir" ]; then
	existingFiles=(*)
    fi
}

pollForAddedFiles()
{
    let observedChanges=0
    typeset -a addedFiles=()

    typeset -A filesMtime=()
    getExistingFiles
    for file in "${existingFiles[@]}"
    do
	fileMtime=$(mtime "$file")
	filesMtime["$file"]=$fileMtime
	[ "$isAcceptExisting" ] && addedFiles+=("$file")
    done

    if [ ${#addedFiles[@]} -gt 0 ]; then
	if [ -n "$stabilizationTime" ]; then
	    handleStabilizedFiles
	else
	    handleFiles "${addedFiles[@]}"
	fi
    fi

    while :
    do
	[ "${interval:?}" = 0 ] || sleep "$interval"

	getExistingFiles
	[ "$isStopOnEmptyDir" ] && [ ${#existingFiles[@]} -eq 0 -a $observedChanges -gt 0 ] && break

	addedFiles=()
	for file in "${existingFiles[@]}"
	do
	    fileMtime=$(mtime "$file")
	    prevMtime=${filesMtime["$file"]}
	    [ -n "$prevMtime" ] || prevMtime=-1
	    if [ $fileMtime -ne $prevMtime -a $prevMtime -ne $STABILIZED_TIME ]; then
		filesMtime["$file"]=$fileMtime
		[ $prevMtime -eq -1 ] && addedFiles+=("$file")
	    elif [ $fileMtime -eq -1 ]; then
		unset filesMtime["$file"]
	    fi
	done

	if [ -n "$stabilizationTime" ]; then
	    handleStabilizedFiles
	elif [ ${#addedFiles[@]} -gt 0 ]; then
	    handleFiles "${addedFiles[@]}"
	fi
    done
}


handleStabilizedFiles()
{
    typeset -a stabilizedFiles=()
    local file
    for file in "${!filesMtime[@]}"
    do
	if [ $((SECONDS - ${filesMtime["$file"]})) -ge $stabilizationTime ]; then
	    stabilizedFiles+=("$file")
	fi
    done

    if [ ${#stabilizedFiles[@]} -gt 0 ]; then
	handleFiles "${stabilizedFiles[@]}"

	# Avoid that the files get picked up again on the next iteration if it doesn't get removed.
	for file in "${stabilizedFiles[@]}"
	do
	    filesMtime["$file"]=$STABILIZED_TIME
	done
    fi
}

handleFiles()
{
    # Sort ascending by modification date; this is important for --count,
    # --max-files, and --stop-on.
    typeset -a files=()
    readarray -t files < <(
	SEP=/
	# Use / as the field separator; as we're dealing with filenames, this
	# cannot appear in $file.
	for file
	do
	    printf "%s${SEP}%s\\n" "${filesMtime["$file"]}" "$file"
	done | sort --field-separator "$SEP" --key 1,1n --key 2 | sed -e "s#^[^${SEP}]\\+${SEP}##"
    )

    while [ ${#files[@]} -gt 0 ]
    do
	typeset -a fileSet=("${files[@]:0:$maxFiles}")
	files=("${files[@]:$maxFiles}")
	executeTrigger "${fileSet[@]}"
    done
}

executeTrigger()
{
    local isExit=
    if [ -n "$stopFilenamePattern" ] || [ "$isStopOnEmptyFile" ]; then
	local file fileCnt=0 isEncounteredEmptyFile=
	for file
	do
	    let fileCnt+=1
	    if { [ -n "$stopFilenamePattern" ] && [[ "$file" =~ $stopFilenamePattern ]]; } ||
		{ [ "$isStopOnEmptyFile" ] && [ -e "$file" -a ! -s "$file" ] && isEncounteredEmptyFile=t; }; then
		[ "$isEncounteredEmptyFile" ] && [ "$isDeleteEmptyFile" ] && rm -- "$file"

		if [ $fileCnt -eq 1 ]; then
		    # Optimization when the first file already is the stop file.
		    # (When no --max-files is configured this is always the
		    # case.)
		    exit 0
		else
		    # Need to still process any files added before the stop
		    # file.
		    set -- "${@:1:$((fileCnt-1))}"
		    isExit=t
		fi
		break
	    fi
	done
    fi

    let observedChanges+=1

    [ "$isPrint" ] && printf '%s\n' "$@"

    if [ ${#commands[@]} -ge 1 ]; then
	if [ -n "$exitOn" -a -n "$isParallel" -a ! -e "$keepRunningMarkerFile" ]; then
	    # The marker file is gone; this means we should not trigger anything
	    # new, and instead exit the script.
	    exit 0
	fi

	[ "$rateLimit" ] && sleep "$rateLimit"
	eval 'triggerFile "$@"' ${isParallel:+&}
    fi

    if [ "$isExit" ]; then
	exit 0
    elif [ "$count" ]; then
	[ $observedChanges -ge $count ] && exit 0
    fi
}
triggerFile()
{
    local quotedFilespecs; printf -v quotedFilespecs '%q ' "$@"; quotedFilespecs=${quotedFilespecs% }
    typeset -a expandedCommands=("${commands[@]//"$fileMarker"/$quotedFilespecs}")

    [ "$delay" ] && sleep "$delay"

    if [ "$isBare" ]; then
	eval "${expandedCommands[@]}"
    else
	{ printf '%s ' "${expandedCommands[@]}"; printf '\n'; } | runWithPrompt "${runWithPromptArgs[@]}" --comment "$observedChanges"
    fi
    exitStatus=$?

    if [ "$deleteOn" ] && [ $exitStatus $deleteComparison $deleteOn ]; then
	rm -- "$@"
    fi
    if [ "$exitOn" ] && [ $exitStatus $exitComparison $exitOn ]; then
	[ "$isParallel" ] && kill -SIGUSR1 $$
	exit 0
    fi
}

shutdown()
{
    if [ -e "$keepRunningMarkerFile" ]; then
	rm -f "$keepRunningMarkerFile"
	wait    # Wait for running jobs to finish; this avoids the "Terminated" message and exit status 143.
    fi
    exit 0
}

trap "shutdown" SIGUSR1
if [ -n "$pgid" ]; then
    trap "kill -- -$pgid" EXIT  # If we're the leader, kill subshell processes when the script exits.
else
    trap "jobs -p | xargs kill --" EXIT  # Someone else is the leader; killing remaining jobs is all we can do here.
fi
pollForAddedFiles "$@"
