#!/bin/bash

: ${EACHARG_ARG_MARKER:='{}'}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--with-header|--with-prompt] [--usage-redirect COMMAND] -c|--command "COMMANDLINE" | SIMPLECOMMAND [...] -- ARGUMENT [...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 'Try %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Execute COMMAND with each supplied ARGUMENT (which either is appended or
replaces any $EACHARG_ARG_MARKER marker inside COMMANDLINE) individually. So one invocation of
COMMAND per ARGUMENT.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --with-header   Print a header (containing the current ARGUMENT) before each
		    execution.
    --with-prompt   Emulate a full prompt (as if invoking COMMAND) before each
		    execution.
    --usage-redirect COMMAND
		    When no ARGUMENT(s) are passed, redirect to COMMAND --help
		    for usage instructions instead of printing this command's
		    usage. Useful for wrapper scripts to delegate back to
		    themselves.
EXIT STATUS:
Overall exit status is the highest status of all.

Example:
HELPTEXT
    printf '%q %s\n' "$(basename "$1")" 'ping -c1 -q -- google.com yahoo.com bing.com'
}

# In order to maintain the order of commands, we need to investigate beforehand
# whether eval is needed.
isNeedEval=
for arg
do
    case "$arg" in
	--command|-c)	isNeedEval=t;;
	--)		break;;
    esac
done

with=
typeset -a commands=()
typeset -a simpleCommands=()
usageRedirectCommand=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--command|-c)	shift; commands+=("$1"); isNeedEval=t; shift;;
	--with-header)	shift; with=header;;
	--with-prompt)	shift; with=prompt;;
	--usage-redirect)
			shift; usageRedirectCommand="$1"; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		typeset -a cmd=()
			while [ $# -gt 0 -a "$1" != '--' ]
			do
			    cmd+=("$1")
			    shift
			done
			if [ "$isNeedEval" ]; then
			    # Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
			    # undo the effects of eval.
			    printf -v quotedSimpleCommand '%q ' "${cmd[@]}"
			    printf -v escapedArgMarker %q "$EACHARG_ARG_MARKER"
			    commands+=(${commands:+;} "${quotedSimpleCommand//"$escapedArgMarker"/$EACHARG_ARG_MARKER}")	# %q escapes {}, we don't want that to have it interpolated later.
			else
			    commands+=(${commands:+;} "${cmd[@]}")
			fi
			;;
    esac
done
if [ ${#commands[@]} -eq 0 ]; then
    echo >&2 'ERROR: No COMMAND(s) specified; need to pass -c|--command "COMMANDLINE", or SIMPLECOMMAND.'
    exit 2
fi
if [ $# -eq 0 ]; then
    echo >&2 'ERROR: No ARGUMENT(s) passed.'
    echo >&2
    if [ "$usageRedirectCommand" ]; then
	"$usageRedirectCommand" --help
    else
	printShortUsage "$0" >&2
    fi
    exit 2
fi


case "$with" in
    prompt)
	quoter='%q'; [ "$isNeedEval" ] && quoter='%s'
	for arg
	do
	    [ "$isNeedEval" ] && printf -v arg '%q' "$arg"
	    typeset -a interpolatedCommands=("${commands[@]//"$EACHARG_ARG_MARKER"/$arg}")
	    typeset -a a=("$arg")   # Quoter for isNeedEval=t is off, so need to use quoted arg here.
	    [ "${interpolatedCommands[*]}" = "${commands[*]}" ] || a=()

	    printf "$quoter " "${interpolatedCommands[@]}" "${a[@]}"
	    printf '\n'
	done | runWithPrompt --worst-status
	;;
    *)
	status=0
	typeset -a firstArg=(--first)
	for arg
	do
	    if [ "$with" = 'header' ]; then
		header "${firstArg[@]}" "$arg"
		firstArg=()
	    fi

	    typeset -a a=("$arg")   # No quoting, as array provides separation.
	    [ "$isNeedEval" ] && printf -v arg '%q' "$arg"
	    typeset -a interpolatedCommands=("${commands[@]//"$EACHARG_ARG_MARKER"/$arg}")
	    [ "${interpolatedCommands[*]}" = "${commands[*]}" ] || a=()

	    saveEachArgArgMarker="$EACHARG_ARG_MARKER"; unset EACHARG_ARG_MARKER

	    if [ "$isNeedEval" ]; then
		eval "${interpolatedCommands[@]}" '"${a[@]}"'
	    else
		"${interpolatedCommands[@]}" "${a[@]}"
	    fi || { exitStatus=$?; if [ $exitStatus -gt $status ]; then status=$exitStatus; fi; }

	    EACHARG_ARG_MARKER="$saveEachArgArgMarker"
	done
	exit $status
	;;
esac
