#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-d|--or-existing DIRSPEC [...]] [-n|--name NAME] [-c|--command "COMMANDLINE" [-c ...] | [--] SIMPLECOMMAND [...]] [-?|-h|--help]'
    echo
    printf 'Usage: echo COMMANDLINES | %q %s\n' "$(basename "$1")" '[-d|--or-existing DIRSPEC [...]] [-n|--name NAME] -|--stdin'
    echo
    printf 'Usage: %q %s <<EOF\n  COMMANDLINE\n...\nEOF\n' "$(basename "$1")" '[...] -|--stdin'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Open a new shell in a temporary directory that is removed on exit.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --or-existing|-d DIRSPEC	Use DIRSPEC if it exists (and keep it
				afterwards) instead of creating a new temporary
				directory.
    --name|-n NAME		Use NAME as the temp dir prefix.
HELPTEXT
}

prefix="$(basename -- "$0")"
typeset -a tmpDirspecs=()
isStdin=
isNeedEval=
typeset -a commands=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--or-existing|-d)
			shift; tmpDirspecs+=("${1:?}"); shift;;
	--name|-n)	shift; prefix="${1:?}"; shift;;
	--command|-c)	shift; commands+=(${commands:+;} "$1"); isNeedEval=t; shift;;
	--stdin|-)	shift; isStdin=t;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    if [ "$isNeedEval" ]; then
	# Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
	# undo the effects of eval.
	commands+=(${commands:+;} $(printf '%q ' "$@"))
    else
	commands=("$@")
    fi
elif [ "$isStdin" ]; then
    commands+=("$(< /dev/stdin)")
    [ ${#commands[@]} -gt 0 ] || exit 1

    isNeedEval=t
    { exec 0</dev/tty; } 2>/dev/null
fi

hasTempDir()
{
    for tmpDirspec in "${tmpDirspecs[@]}"
    do
	[ -d "$tmpDirspec" ] && return 0
    done
    return 1
}

if ! hasTempDir; then
    tmpDirspec="$(mktemp --directory --tmpdir "${prefix}-XXXXXX" 2>/dev/null || { dirspec="${TEMP:-/tmp}/${prefix}.$$$RANDOM"; mkdir -p -- "$dirspec" && printf %s "$dirspec"; })" || exit $?
    cleanup()
    {
	rm -rf "$tmpDirspec" 2>/dev/null
    }
    [ "${DEBUG:-}" ] || trap 'cleanup' EXIT
fi

cd "$tmpDirspec" || exit $?

if [ ${#commands[@]} -gt 0 ]; then
    if [ "$isNeedEval" ]; then
	eval "${commands[@]}"
    else
	"${commands[@]}"
    fi
else
    let _SHLVL_BASE-=1
    "$SHELL" -i
fi
