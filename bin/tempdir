#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-d|--or-existing DIRSPEC [...] [-C|--create-subdir SUBDIR]] [-n|--name NAME] [-c|--command "COMMANDLINE" [-c ...] | [--] SIMPLECOMMAND [...]] [-?|-h|--help]'
    echo
    printf 'Usage: echo COMMANDLINES | %q %s\n' "$(basename "$1")" '[-d|--or-existing DIRSPEC [...] [-C|--create-subdir SUBDIR]] [-n|--name NAME] -|--stdin'
    echo
    printf 'Usage: %q %s <<EOF\n  COMMANDLINE\n...\nEOF\n' "$(basename "$1")" '[...] -|--stdin'
    echo
    printf 'Usage: TEMPDIR="$(%q %s)" && cd "$TEMPDIR" || exit $?; ...; rm -rf -- "$TEMPDIR" 2>/dev/null\n' "$(basename "$1")" '[...] -p|--print'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Open a new shell in a temporary directory that is removed on exit.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --or-existing|-d DIRSPEC	Use DIRSPEC if it exists (and keep it
				afterwards) instead of creating a new temporary
				directory.
    --create-subdir|-C SUBDIR	In an existing DIRSPEC, create and use SUBDIR
				inside it. If SUBDIR contains at least 3
				consecutive 'X's in its last path component, a
				temporary directory is created (and removed on
				exit, too).
    --name|-n NAME		Use NAME as the temp dir prefix.
    --print|-p			Just print the temporary directory. Any cleanup
				has to be done by the client.
HELPTEXT
}

prefix="$(basename -- "$0")"
typeset -a tmpDirspecs=()
createSubdir=
isStdin=
isNeedEval=
isPrint=
typeset -a commands=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--or-existing|-d)
			shift; tmpDirspecs+=("${1:?}"); shift;;
	--create-subdir|-C)
			shift; createSubdir="${1:?}"; shift;;
	--name|-n)	shift; prefix="${1:?}"; shift;;
	--command|-c)	shift; commands+=(${commands:+;} "$1"); isNeedEval=t; shift;;
	--stdin|-)	shift; isStdin=t;;
	--print|-p)	shift; isPrint=t;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    if [ "$isStdin" ] || [ "$isPrint" ]; then
	printUsage "$0"
	exit 2
    fi >&2

    if [ "$isNeedEval" ]; then
	# Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
	# undo the effects of eval.
	commands+=(${commands:+;} $(printf '%q ' "$@"))
    else
	commands=("$@")
    fi
elif [ "$isStdin" ]; then
    if [ "$isPrint" ]; then
	printUsage "$0"
	exit 2
    fi >&2

    commands+=("$(< /dev/stdin)")
    [ ${#commands[@]} -gt 0 ] || exit 1

    isNeedEval=t
    { exec 0</dev/tty; } 2>/dev/null
fi

hasTempDir()
{
    for tmpDirspec in "${tmpDirspecs[@]}"
    do
	[ -d "$tmpDirspec" -a -w "$tmpDirspec" ] && return 0
    done

    tmpDirspec=''
    return 1
}

cleanup()
{
    rm -rf "$tmpDirspec" 2>/dev/null
}

tmpDirspec=
if hasTempDir; then
    if [ -n "$createSubdir" ]; then
	tmpDirspec="${tmpDirspec%/}/${createSubdir#/}"
	if [[ "$tmpDirspec" =~ X{3,}[^/]*$ ]]; then
	    mkdir --parents -- "$(dirname -- "$tmpDirspec")" && \
		tmpDirspec="$(mktemp --directory --tmpdir "$tmpDirspec" 2>/dev/null || ( shopt -qs extglob; dirspec="${tmpDirspec/XX+(X)/$$$RANDOM}"; mkdir -p -- "$dirspec" && printf %s "$dirspec"; ))" || \
		tmpDirspec=''

	    [ ! "$isPrint" ] && [ -z "${DEBUG:-}" ] && trap 'cleanup' EXIT
	else
	    mkdir --parents -- "$tmpDirspec" || tmpDirspec=''
	fi
    fi
fi
if [ -z "$tmpDirspec" ]; then
    tmpDirspec="$(mktemp --directory --tmpdir "${prefix}-XXXXXX" 2>/dev/null || { dirspec="${TEMP:-/tmp}/${prefix}.$$$RANDOM"; mkdir -p -- "$dirspec" && printf %s "$dirspec"; })" || exit $?

    [ ! "$isPrint" ] && [ -z "${DEBUG:-}" ] && trap 'cleanup' EXIT
fi

if [ "$isPrint" ]; then
    printf '%s\n' "$tmpDirspec"
    exit 0
fi

cd "$tmpDirspec" || exit $?

if [ ${#commands[@]} -gt 0 ]; then
    if [ "$isNeedEval" ]; then
	eval "${commands[@]}"
    else
	"${commands[@]}"
    fi
else
    let _SHLVL_BASE-=1
    "$SHELL" -i
fi
