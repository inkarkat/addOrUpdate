#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-i[SUFFIX]|--in-place[=SUFFIX]|-t|--test-only] [--all] [--ignore-nonexisting|--create-nonexisting] SED-ARGS [...] -- [FILE ...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Tries to modify at least one (all with --all) of the passed FILE(s) through
SED-ARGS. The sed program should fail with 99 (\$q99) if no modifications were
needed / made for a FILE. One approach for that is using the hold space as a
marker that a modification has happened:
	-e '/^SELECTOR/{ h; s/PATTERN/REPLACEMENT/ }'
	-e '\${ x; /^\$/{ x; q99 }; x }'
    or:	-e 's/PATTERN/REPLACEMENT/; T end; h'
	-e :end
	-e '\${ x; /^\$/{ x; q99 }; x }'
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --in-place[=SUFFIX]|-i[SUFFIX]
			    Edit FILE(s) in place (makes backup if SUFFIX
			    supplied) instead of printing to standard output.
    --test-only|-t	    Just check whether an update would be made. Does not
			    modify or create non-existing FILE(s), or output the
			    result.
    --all		    Instead of just updating the first to match or
			    appending to the last FILE, make sure that each FILE
			    gets updated.
    --ignore-nonexisting    Succeed instead of complaining if (none of the)
			    FILE(s) does not exist yet.
    --create-nonexisting    Create the first (each with --all) passed FILE if it
			    does not exist yet, (and insert the LINE there).

EXIT STATUS:
    0	An update has happened (with --all: in at least one FILE).
    1	No modifications were made.
    2	Bad invocation, wrong or missing command-line arguments.
    3	Internal error or failed assertion.
    4	None of the passed FILE(s) exist; no modifications could be made.
    5	A FILE could not be created / modified (due to problems with sed).

Example:
HELPTEXT
    printf '%q %s\n' "$(basename "$1")" '-i.bak TODO'
}

isTestOnly=
isAll=
isIgnoreNonexisting=
isCreateNonexisting=
typeset -a sedProgram=()
typeset -a sedInplaceArgs=()
line=
acceptMatch=
updateMatch=
unset replacement
unset freshPreLines
unset freshPostLines
unset updatePreLines
unset updatePostLines
addBeforeAddress=
addAfterAddress=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	    shift; printLongUsage "$0"; exit 0;;
	--in-place|--in-place=*|-i*)
			    sedInplaceArgs+=("$1"); shift;;
	--test-only|-t)	    shift; isTestOnly=t;;
	--all)		    shift; isAll=t;;
	--ignore-nonexisting)
			    shift; isIgnoreNonexisting=t;;
	--create-nonexisting)
			    shift; isCreateNonexisting=t;;
	--)		    shift; break;;
	*)		    sedProgram+=("$1"); shift;;
    esac
done
if [ ${#sedProgram[@]} -eq 0 ]; then
    echo 'ERROR: No SED-ARGS passed.'
    echo
    printUsage "$0"
    exit 2
elif [ ${#sedInplaceArgs[@]} -gt 0 -a -n "$isTestOnly" ]; then
    echo 'ERROR: Cannot combine --in-place and --test-only.'
    echo
    printUsage "$0"
    exit 2
elif [ "$isIgnoreNonexisting" ] && [ "$isCreateNonexisting" ]; then
    echo 'ERROR: Cannot combine --ignore-nonexisting and --create-nonexisting.'
    echo
    printUsage "$0"
    exit 2
fi >&2

[ $# -eq 0 ] && set -- -    # Read from stdin if no FILE is passed.
create()
{
    local filespec="$1"; shift
    # If the file is completely empty, sed treats this as zero lines, and no
    # address (not 1, not $) will match; the whole invocation would be a no-op.
    # Therefore, start with a single empty line, and change that one instead.
    echo > "$filespec" || return 1

    process "$filespec"
}
process()
{
    local filespec="$1"; shift

    sed "${sedInplaceArgs[@]}" \
	"${sedProgram[@]}" \
	-- "$filespec"
}

hadSuccess=
let existingCount=0
for ((i = 1; i <= $#; i++))
do
    filespec="${@:$i:1}"
    if [ "$filespec" = '-' -o -e "$filespec" ]; then
	let existingCount+=1
    elif [ "$isCreateNonexisting" ]; then
	if [ "$isTestOnly" ]; then
	    status=0
	else
	    create "$filespec"
	    status=$?
	fi
	case $status in
	    0)	[ "$isAll" ] || exit $status;;
	    *)	status=5;;
	esac
	let existingCount+=1
	continue
    else
	continue
    fi

    eval 'process "$filespec"' "${isTestOnly:+>/dev/null}"
    status=$?
    case $status in
	0)	[ "$isAll" ] && hadSuccess=t || exit $status;;
	99)	status=1;;
	*)	status=5;;
    esac
done

if [ $existingCount -eq 0 ]; then
    if [ -n "$isIgnoreNonexisting" ]; then
	status=0
    else
	status=4
    fi
fi
[ "$hadSuccess" ] || exit $status
